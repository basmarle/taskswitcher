
AVRGCC1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000a  00800100  00000c74  00000d08  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000c74  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000044  0080010a  0080010a  00000d12  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000d12  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000d44  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000050  00000000  00000000  00000d84  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000390  00000000  00000000  00000dd4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000190  00000000  00000000  00001164  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000001b9  00000000  00000000  000012f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000e0  00000000  00000000  000014b0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000026d  00000000  00000000  00001590  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000168  00000000  00000000  000017fd  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000040  00000000  00000000  00001965  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 b8 02 	jmp	0x570	; 0x570 <__vector_11>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e4 e7       	ldi	r30, 0x74	; 116
  7c:	fc e0       	ldi	r31, 0x0C	; 12
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	aa 30       	cpi	r26, 0x0A	; 10
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	aa e0       	ldi	r26, 0x0A	; 10
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	ae 34       	cpi	r26, 0x4E	; 78
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 bb 01 	call	0x376	; 0x376 <main>
  9e:	0c 94 38 06 	jmp	0xc70	; 0xc70 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <task1>:
//Declare the ISR as a naked function
ISR (TIMER1_COMPA_vect) __attribute__ ((naked));
void * sleep(long time) __attribute__((naked));

//Task1
void * task1(){
  a6:	cf 93       	push	r28
  a8:	df 93       	push	r29
  aa:	00 d0       	rcall	.+0      	; 0xac <task1+0x6>
  ac:	00 d0       	rcall	.+0      	; 0xae <task1+0x8>
  ae:	cd b7       	in	r28, 0x3d	; 61
  b0:	de b7       	in	r29, 0x3e	; 62
	long a = 0;
  b2:	19 82       	std	Y+1, r1	; 0x01
  b4:	1a 82       	std	Y+2, r1	; 0x02
  b6:	1b 82       	std	Y+3, r1	; 0x03
  b8:	1c 82       	std	Y+4, r1	; 0x04
	while(1){
		a++;
  ba:	89 81       	ldd	r24, Y+1	; 0x01
  bc:	9a 81       	ldd	r25, Y+2	; 0x02
  be:	ab 81       	ldd	r26, Y+3	; 0x03
  c0:	bc 81       	ldd	r27, Y+4	; 0x04
  c2:	01 96       	adiw	r24, 0x01	; 1
  c4:	a1 1d       	adc	r26, r1
  c6:	b1 1d       	adc	r27, r1
  c8:	89 83       	std	Y+1, r24	; 0x01
  ca:	9a 83       	std	Y+2, r25	; 0x02
  cc:	ab 83       	std	Y+3, r26	; 0x03
  ce:	bc 83       	std	Y+4, r27	; 0x04
		PORTB = (0 << PINB5);
  d0:	85 e2       	ldi	r24, 0x25	; 37
  d2:	90 e0       	ldi	r25, 0x00	; 0
  d4:	fc 01       	movw	r30, r24
  d6:	10 82       	st	Z, r1
		a = 0;
  d8:	19 82       	std	Y+1, r1	; 0x01
  da:	1a 82       	std	Y+2, r1	; 0x02
  dc:	1b 82       	std	Y+3, r1	; 0x03
  de:	1c 82       	std	Y+4, r1	; 0x04
		sleep(100);
  e0:	64 e6       	ldi	r22, 0x64	; 100
  e2:	70 e0       	ldi	r23, 0x00	; 0
  e4:	80 e0       	ldi	r24, 0x00	; 0
  e6:	90 e0       	ldi	r25, 0x00	; 0
  e8:	0e 94 49 02 	call	0x492	; 0x492 <sleep>
		PORTB = (1 << PINB5);
  ec:	85 e2       	ldi	r24, 0x25	; 37
  ee:	90 e0       	ldi	r25, 0x00	; 0
  f0:	20 e2       	ldi	r18, 0x20	; 32
  f2:	fc 01       	movw	r30, r24
  f4:	20 83       	st	Z, r18
		sleep(100);
  f6:	64 e6       	ldi	r22, 0x64	; 100
  f8:	70 e0       	ldi	r23, 0x00	; 0
  fa:	80 e0       	ldi	r24, 0x00	; 0
  fc:	90 e0       	ldi	r25, 0x00	; 0
  fe:	0e 94 49 02 	call	0x492	; 0x492 <sleep>
	}
 102:	db cf       	rjmp	.-74     	; 0xba <task1+0x14>

00000104 <task2>:
}

//Task2
void * task2(){
 104:	cf 93       	push	r28
 106:	df 93       	push	r29
 108:	00 d0       	rcall	.+0      	; 0x10a <task2+0x6>
 10a:	00 d0       	rcall	.+0      	; 0x10c <task2+0x8>
 10c:	cd b7       	in	r28, 0x3d	; 61
 10e:	de b7       	in	r29, 0x3e	; 62
	long b = 0;
 110:	19 82       	std	Y+1, r1	; 0x01
 112:	1a 82       	std	Y+2, r1	; 0x02
 114:	1b 82       	std	Y+3, r1	; 0x03
 116:	1c 82       	std	Y+4, r1	; 0x04
	while(1){
		b++;
 118:	89 81       	ldd	r24, Y+1	; 0x01
 11a:	9a 81       	ldd	r25, Y+2	; 0x02
 11c:	ab 81       	ldd	r26, Y+3	; 0x03
 11e:	bc 81       	ldd	r27, Y+4	; 0x04
 120:	01 96       	adiw	r24, 0x01	; 1
 122:	a1 1d       	adc	r26, r1
 124:	b1 1d       	adc	r27, r1
 126:	89 83       	std	Y+1, r24	; 0x01
 128:	9a 83       	std	Y+2, r25	; 0x02
 12a:	ab 83       	std	Y+3, r26	; 0x03
 12c:	bc 83       	std	Y+4, r27	; 0x04
		//PORTB = (1 << PINB5);
		b = 0;
 12e:	19 82       	std	Y+1, r1	; 0x01
 130:	1a 82       	std	Y+2, r1	; 0x02
 132:	1b 82       	std	Y+3, r1	; 0x03
 134:	1c 82       	std	Y+4, r1	; 0x04
	}
 136:	f0 cf       	rjmp	.-32     	; 0x118 <task2+0x14>

00000138 <task3>:
}

//Task3
void * task3(){
 138:	cf 93       	push	r28
 13a:	df 93       	push	r29
 13c:	cd b7       	in	r28, 0x3d	; 61
 13e:	de b7       	in	r29, 0x3e	; 62
	current_node->task->markedforremoval = 1;
 140:	80 91 18 01 	lds	r24, 0x0118
 144:	90 91 19 01 	lds	r25, 0x0119
 148:	fc 01       	movw	r30, r24
 14a:	80 81       	ld	r24, Z
 14c:	91 81       	ldd	r25, Z+1	; 0x01
 14e:	21 e0       	ldi	r18, 0x01	; 1
 150:	30 e0       	ldi	r19, 0x00	; 0
 152:	fc 01       	movw	r30, r24
 154:	31 8b       	std	Z+17, r19	; 0x11
 156:	20 8b       	std	Z+16, r18	; 0x10
	//End of task, jump to ISR
	asm("ijmp" :: "z" (TIMER1_COMPA_vect));
 158:	88 eb       	ldi	r24, 0xB8	; 184
 15a:	92 e0       	ldi	r25, 0x02	; 2
 15c:	fc 01       	movw	r30, r24
 15e:	09 94       	ijmp
}
 160:	df 91       	pop	r29
 162:	cf 91       	pop	r28
 164:	08 95       	ret

00000166 <initTask>:

void initTask(void * taskAddress){
 166:	0f 93       	push	r16
 168:	1f 93       	push	r17
 16a:	cf 93       	push	r28
 16c:	df 93       	push	r29
 16e:	00 d0       	rcall	.+0      	; 0x170 <initTask+0xa>
 170:	cd b7       	in	r28, 0x3d	; 61
 172:	de b7       	in	r29, 0x3e	; 62
 174:	9a 83       	std	Y+2, r25	; 0x02
 176:	89 83       	std	Y+1, r24	; 0x01
	static int taskCount = 0;
	
	//Only use the root for the first task
	if(taskCount == 0){
 178:	80 91 0e 01 	lds	r24, 0x010E
 17c:	90 91 0f 01 	lds	r25, 0x010F
 180:	89 2b       	or	r24, r25
 182:	99 f4       	brne	.+38     	; 0x1aa <initTask+0x44>
		root->task = malloc(sizeof(task_table_t));
 184:	00 91 14 01 	lds	r16, 0x0114
 188:	10 91 15 01 	lds	r17, 0x0115
 18c:	88 e1       	ldi	r24, 0x18	; 24
 18e:	90 e0       	ldi	r25, 0x00	; 0
 190:	0e 94 0b 05 	call	0xa16	; 0xa16 <malloc>
 194:	f8 01       	movw	r30, r16
 196:	91 83       	std	Z+1, r25	; 0x01
 198:	80 83       	st	Z, r24
		root->next = 0;
 19a:	80 91 14 01 	lds	r24, 0x0114
 19e:	90 91 15 01 	lds	r25, 0x0115
 1a2:	fc 01       	movw	r30, r24
 1a4:	13 82       	std	Z+3, r1	; 0x03
 1a6:	12 82       	std	Z+2, r1	; 0x02
 1a8:	36 c0       	rjmp	.+108    	; 0x216 <initTask+0xb0>
	} else {
		current_node->next = malloc(sizeof(task_table_t));
 1aa:	00 91 18 01 	lds	r16, 0x0118
 1ae:	10 91 19 01 	lds	r17, 0x0119
 1b2:	88 e1       	ldi	r24, 0x18	; 24
 1b4:	90 e0       	ldi	r25, 0x00	; 0
 1b6:	0e 94 0b 05 	call	0xa16	; 0xa16 <malloc>
 1ba:	f8 01       	movw	r30, r16
 1bc:	93 83       	std	Z+3, r25	; 0x03
 1be:	82 83       	std	Z+2, r24	; 0x02
		current_node->next->previous = current_node;
 1c0:	80 91 18 01 	lds	r24, 0x0118
 1c4:	90 91 19 01 	lds	r25, 0x0119
 1c8:	fc 01       	movw	r30, r24
 1ca:	82 81       	ldd	r24, Z+2	; 0x02
 1cc:	93 81       	ldd	r25, Z+3	; 0x03
 1ce:	20 91 18 01 	lds	r18, 0x0118
 1d2:	30 91 19 01 	lds	r19, 0x0119
 1d6:	fc 01       	movw	r30, r24
 1d8:	35 83       	std	Z+5, r19	; 0x05
 1da:	24 83       	std	Z+4, r18	; 0x04
		current_node = current_node->next;
 1dc:	80 91 18 01 	lds	r24, 0x0118
 1e0:	90 91 19 01 	lds	r25, 0x0119
 1e4:	fc 01       	movw	r30, r24
 1e6:	82 81       	ldd	r24, Z+2	; 0x02
 1e8:	93 81       	ldd	r25, Z+3	; 0x03
 1ea:	90 93 19 01 	sts	0x0119, r25
 1ee:	80 93 18 01 	sts	0x0118, r24
		current_node->task = malloc(sizeof(task_table_t));
 1f2:	00 91 18 01 	lds	r16, 0x0118
 1f6:	10 91 19 01 	lds	r17, 0x0119
 1fa:	88 e1       	ldi	r24, 0x18	; 24
 1fc:	90 e0       	ldi	r25, 0x00	; 0
 1fe:	0e 94 0b 05 	call	0xa16	; 0xa16 <malloc>
 202:	f8 01       	movw	r30, r16
 204:	91 83       	std	Z+1, r25	; 0x01
 206:	80 83       	st	Z, r24
		current_node->next = 0;
 208:	80 91 18 01 	lds	r24, 0x0118
 20c:	90 91 19 01 	lds	r25, 0x0119
 210:	fc 01       	movw	r30, r24
 212:	13 82       	std	Z+3, r1	; 0x03
 214:	12 82       	std	Z+2, r1	; 0x02
	}
	
	//Set ID of task
	current_node->task->id = taskCount;
 216:	80 91 18 01 	lds	r24, 0x0118
 21a:	90 91 19 01 	lds	r25, 0x0119
 21e:	fc 01       	movw	r30, r24
 220:	80 81       	ld	r24, Z
 222:	91 81       	ldd	r25, Z+1	; 0x01
 224:	20 91 0e 01 	lds	r18, 0x010E
 228:	30 91 0f 01 	lds	r19, 0x010F
 22c:	fc 01       	movw	r30, r24
 22e:	31 83       	std	Z+1, r19	; 0x01
 230:	20 83       	st	Z, r18
	//Start address of the task
	current_node->task->address = taskAddress;
 232:	80 91 18 01 	lds	r24, 0x0118
 236:	90 91 19 01 	lds	r25, 0x0119
 23a:	fc 01       	movw	r30, r24
 23c:	80 81       	ld	r24, Z
 23e:	91 81       	ldd	r25, Z+1	; 0x01
 240:	29 81       	ldd	r18, Y+1	; 0x01
 242:	3a 81       	ldd	r19, Y+2	; 0x02
 244:	fc 01       	movw	r30, r24
 246:	35 87       	std	Z+13, r19	; 0x0d
 248:	24 87       	std	Z+12, r18	; 0x0c
	//Split into 2 bytes
	current_node->task->pcl = ((int)current_node->task->address & 0x00FF);
 24a:	80 91 18 01 	lds	r24, 0x0118
 24e:	90 91 19 01 	lds	r25, 0x0119
 252:	fc 01       	movw	r30, r24
 254:	80 81       	ld	r24, Z
 256:	91 81       	ldd	r25, Z+1	; 0x01
 258:	20 91 18 01 	lds	r18, 0x0118
 25c:	30 91 19 01 	lds	r19, 0x0119
 260:	f9 01       	movw	r30, r18
 262:	20 81       	ld	r18, Z
 264:	31 81       	ldd	r19, Z+1	; 0x01
 266:	f9 01       	movw	r30, r18
 268:	24 85       	ldd	r18, Z+12	; 0x0c
 26a:	35 85       	ldd	r19, Z+13	; 0x0d
 26c:	33 27       	eor	r19, r19
 26e:	fc 01       	movw	r30, r24
 270:	31 87       	std	Z+9, r19	; 0x09
 272:	20 87       	std	Z+8, r18	; 0x08
	current_node->task->pch = ((int)current_node->task->address & 0xFF00) >> 8;
 274:	80 91 18 01 	lds	r24, 0x0118
 278:	90 91 19 01 	lds	r25, 0x0119
 27c:	fc 01       	movw	r30, r24
 27e:	80 81       	ld	r24, Z
 280:	91 81       	ldd	r25, Z+1	; 0x01
 282:	20 91 18 01 	lds	r18, 0x0118
 286:	30 91 19 01 	lds	r19, 0x0119
 28a:	f9 01       	movw	r30, r18
 28c:	20 81       	ld	r18, Z
 28e:	31 81       	ldd	r19, Z+1	; 0x01
 290:	f9 01       	movw	r30, r18
 292:	24 85       	ldd	r18, Z+12	; 0x0c
 294:	35 85       	ldd	r19, Z+13	; 0x0d
 296:	23 2f       	mov	r18, r19
 298:	33 27       	eor	r19, r19
 29a:	fc 01       	movw	r30, r24
 29c:	33 87       	std	Z+11, r19	; 0x0b
 29e:	22 87       	std	Z+10, r18	; 0x0a
	//Set task pointer
	current_node->task->spl = (0x7D0 - (taskCount * 0x64)) & 0x00FF;
 2a0:	80 91 18 01 	lds	r24, 0x0118
 2a4:	90 91 19 01 	lds	r25, 0x0119
 2a8:	fc 01       	movw	r30, r24
 2aa:	80 81       	ld	r24, Z
 2ac:	91 81       	ldd	r25, Z+1	; 0x01
 2ae:	40 91 0e 01 	lds	r20, 0x010E
 2b2:	50 91 0f 01 	lds	r21, 0x010F
 2b6:	6c e9       	ldi	r22, 0x9C	; 156
 2b8:	64 03       	mulsu	r22, r20
 2ba:	90 01       	movw	r18, r0
 2bc:	65 9f       	mul	r22, r21
 2be:	30 0d       	add	r19, r0
 2c0:	11 24       	eor	r1, r1
 2c2:	20 53       	subi	r18, 0x30	; 48
 2c4:	38 4f       	sbci	r19, 0xF8	; 248
 2c6:	33 27       	eor	r19, r19
 2c8:	fc 01       	movw	r30, r24
 2ca:	35 83       	std	Z+5, r19	; 0x05
 2cc:	24 83       	std	Z+4, r18	; 0x04
	current_node->task->sph = ((0x7D0 - (taskCount * 0x64)) & 0xFF00) >> 8;
 2ce:	80 91 18 01 	lds	r24, 0x0118
 2d2:	90 91 19 01 	lds	r25, 0x0119
 2d6:	fc 01       	movw	r30, r24
 2d8:	80 81       	ld	r24, Z
 2da:	91 81       	ldd	r25, Z+1	; 0x01
 2dc:	40 91 0e 01 	lds	r20, 0x010E
 2e0:	50 91 0f 01 	lds	r21, 0x010F
 2e4:	6c e9       	ldi	r22, 0x9C	; 156
 2e6:	64 03       	mulsu	r22, r20
 2e8:	90 01       	movw	r18, r0
 2ea:	65 9f       	mul	r22, r21
 2ec:	30 0d       	add	r19, r0
 2ee:	11 24       	eor	r1, r1
 2f0:	20 53       	subi	r18, 0x30	; 48
 2f2:	38 4f       	sbci	r19, 0xF8	; 248
 2f4:	23 2f       	mov	r18, r19
 2f6:	33 27       	eor	r19, r19
 2f8:	fc 01       	movw	r30, r24
 2fa:	33 83       	std	Z+3, r19	; 0x03
 2fc:	22 83       	std	Z+2, r18	; 0x02
	//Always first time
	current_node->task->firsttime = 1;
 2fe:	80 91 18 01 	lds	r24, 0x0118
 302:	90 91 19 01 	lds	r25, 0x0119
 306:	fc 01       	movw	r30, r24
 308:	80 81       	ld	r24, Z
 30a:	91 81       	ldd	r25, Z+1	; 0x01
 30c:	21 e0       	ldi	r18, 0x01	; 1
 30e:	30 e0       	ldi	r19, 0x00	; 0
 310:	fc 01       	movw	r30, r24
 312:	37 87       	std	Z+15, r19	; 0x0f
 314:	26 87       	std	Z+14, r18	; 0x0e
	//Not suitable for removal
	current_node->task->markedforremoval = 0;
 316:	80 91 18 01 	lds	r24, 0x0118
 31a:	90 91 19 01 	lds	r25, 0x0119
 31e:	fc 01       	movw	r30, r24
 320:	80 81       	ld	r24, Z
 322:	91 81       	ldd	r25, Z+1	; 0x01
 324:	fc 01       	movw	r30, r24
 326:	11 8a       	std	Z+17, r1	; 0x11
 328:	10 8a       	std	Z+16, r1	; 0x10
	//Set sleep counter 0
	current_node->task->sleepCounter = 0;
 32a:	80 91 18 01 	lds	r24, 0x0118
 32e:	90 91 19 01 	lds	r25, 0x0119
 332:	fc 01       	movw	r30, r24
 334:	80 81       	ld	r24, Z
 336:	91 81       	ldd	r25, Z+1	; 0x01
 338:	fc 01       	movw	r30, r24
 33a:	12 8a       	std	Z+18, r1	; 0x12
 33c:	13 8a       	std	Z+19, r1	; 0x13
 33e:	14 8a       	std	Z+20, r1	; 0x14
 340:	15 8a       	std	Z+21, r1	; 0x15
	//Temp var for sleeping test
	current_node->task->sleeping = 0;
 342:	80 91 18 01 	lds	r24, 0x0118
 346:	90 91 19 01 	lds	r25, 0x0119
 34a:	fc 01       	movw	r30, r24
 34c:	80 81       	ld	r24, Z
 34e:	91 81       	ldd	r25, Z+1	; 0x01
 350:	fc 01       	movw	r30, r24
 352:	17 8a       	std	Z+23, r1	; 0x17
 354:	16 8a       	std	Z+22, r1	; 0x16
	taskCount++;
 356:	80 91 0e 01 	lds	r24, 0x010E
 35a:	90 91 0f 01 	lds	r25, 0x010F
 35e:	01 96       	adiw	r24, 0x01	; 1
 360:	90 93 0f 01 	sts	0x010F, r25
 364:	80 93 0e 01 	sts	0x010E, r24
}
 368:	0f 90       	pop	r0
 36a:	0f 90       	pop	r0
 36c:	df 91       	pop	r29
 36e:	cf 91       	pop	r28
 370:	1f 91       	pop	r17
 372:	0f 91       	pop	r16
 374:	08 95       	ret

00000376 <main>:

int main(void)
{
 376:	cf 93       	push	r28
 378:	df 93       	push	r29
 37a:	cd b7       	in	r28, 0x3d	; 61
 37c:	de b7       	in	r29, 0x3e	; 62
	//stop interrupts
	cli();
 37e:	f8 94       	cli
	//All pins in PORTD are outputs
	DDRB = 0b11111111;    
 380:	84 e2       	ldi	r24, 0x24	; 36
 382:	90 e0       	ldi	r25, 0x00	; 0
 384:	2f ef       	ldi	r18, 0xFF	; 255
 386:	fc 01       	movw	r30, r24
 388:	20 83       	st	Z, r18
	//Set the tick count for the ISR
	kernel_settings.isrTicks = 8000;
 38a:	80 e4       	ldi	r24, 0x40	; 64
 38c:	9f e1       	ldi	r25, 0x1F	; 31
 38e:	90 93 13 01 	sts	0x0113, r25
 392:	80 93 12 01 	sts	0x0112, r24

	// set entire TCCR1A register to 0
	TCCR1A = 0;
 396:	80 e8       	ldi	r24, 0x80	; 128
 398:	90 e0       	ldi	r25, 0x00	; 0
 39a:	fc 01       	movw	r30, r24
 39c:	10 82       	st	Z, r1
	// same for TCCR1B
	TCCR1B = 0;
 39e:	81 e8       	ldi	r24, 0x81	; 129
 3a0:	90 e0       	ldi	r25, 0x00	; 0
 3a2:	fc 01       	movw	r30, r24
 3a4:	10 82       	st	Z, r1
	//initialize counter value to 0
	TCNT1  = 0;
 3a6:	84 e8       	ldi	r24, 0x84	; 132
 3a8:	90 e0       	ldi	r25, 0x00	; 0
 3aa:	fc 01       	movw	r30, r24
 3ac:	11 82       	std	Z+1, r1	; 0x01
 3ae:	10 82       	st	Z, r1
	//Count to
	OCR1A = kernel_settings.isrTicks;
 3b0:	88 e8       	ldi	r24, 0x88	; 136
 3b2:	90 e0       	ldi	r25, 0x00	; 0
 3b4:	20 91 12 01 	lds	r18, 0x0112
 3b8:	30 91 13 01 	lds	r19, 0x0113
 3bc:	fc 01       	movw	r30, r24
 3be:	31 83       	std	Z+1, r19	; 0x01
 3c0:	20 83       	st	Z, r18
	// turn on CTC mode
	TCCR1B |= (1 << WGM12);
 3c2:	81 e8       	ldi	r24, 0x81	; 129
 3c4:	90 e0       	ldi	r25, 0x00	; 0
 3c6:	21 e8       	ldi	r18, 0x81	; 129
 3c8:	30 e0       	ldi	r19, 0x00	; 0
 3ca:	f9 01       	movw	r30, r18
 3cc:	20 81       	ld	r18, Z
 3ce:	28 60       	ori	r18, 0x08	; 8
 3d0:	fc 01       	movw	r30, r24
 3d2:	20 83       	st	Z, r18
	// Set bit for prescaler
	TCCR1B |= (1 << CS10);
 3d4:	81 e8       	ldi	r24, 0x81	; 129
 3d6:	90 e0       	ldi	r25, 0x00	; 0
 3d8:	21 e8       	ldi	r18, 0x81	; 129
 3da:	30 e0       	ldi	r19, 0x00	; 0
 3dc:	f9 01       	movw	r30, r18
 3de:	20 81       	ld	r18, Z
 3e0:	21 60       	ori	r18, 0x01	; 1
 3e2:	fc 01       	movw	r30, r24
 3e4:	20 83       	st	Z, r18
	// enable timer compare interrupt
	TIMSK1 |= (1 << OCIE1A);
 3e6:	8f e6       	ldi	r24, 0x6F	; 111
 3e8:	90 e0       	ldi	r25, 0x00	; 0
 3ea:	2f e6       	ldi	r18, 0x6F	; 111
 3ec:	30 e0       	ldi	r19, 0x00	; 0
 3ee:	f9 01       	movw	r30, r18
 3f0:	20 81       	ld	r18, Z
 3f2:	22 60       	ori	r18, 0x02	; 2
 3f4:	fc 01       	movw	r30, r24
 3f6:	20 83       	st	Z, r18
	
	//Create a root TCB
	root = malloc(sizeof(struct node));
 3f8:	86 e0       	ldi	r24, 0x06	; 6
 3fa:	90 e0       	ldi	r25, 0x00	; 0
 3fc:	0e 94 0b 05 	call	0xa16	; 0xa16 <malloc>
 400:	90 93 15 01 	sts	0x0115, r25
 404:	80 93 14 01 	sts	0x0114, r24
	current_node  = root;
 408:	80 91 14 01 	lds	r24, 0x0114
 40c:	90 91 15 01 	lds	r25, 0x0115
 410:	90 93 19 01 	sts	0x0119, r25
 414:	80 93 18 01 	sts	0x0118, r24
	initTask(task1);
 418:	83 e5       	ldi	r24, 0x53	; 83
 41a:	90 e0       	ldi	r25, 0x00	; 0
 41c:	0e 94 b3 00 	call	0x166	; 0x166 <initTask>
	temp = current_node;
 420:	80 91 18 01 	lds	r24, 0x0118
 424:	90 91 19 01 	lds	r25, 0x0119
 428:	90 93 11 01 	sts	0x0111, r25
 42c:	80 93 10 01 	sts	0x0110, r24
	initTask(task2);
 430:	82 e8       	ldi	r24, 0x82	; 130
 432:	90 e0       	ldi	r25, 0x00	; 0
 434:	0e 94 b3 00 	call	0x166	; 0x166 <initTask>
	initTask(task3);
 438:	8c e9       	ldi	r24, 0x9C	; 156
 43a:	90 e0       	ldi	r25, 0x00	; 0
 43c:	0e 94 b3 00 	call	0x166	; 0x166 <initTask>
	current_node->next = root;
 440:	80 91 18 01 	lds	r24, 0x0118
 444:	90 91 19 01 	lds	r25, 0x0119
 448:	20 91 14 01 	lds	r18, 0x0114
 44c:	30 91 15 01 	lds	r19, 0x0115
 450:	fc 01       	movw	r30, r24
 452:	33 83       	std	Z+3, r19	; 0x03
 454:	22 83       	std	Z+2, r18	; 0x02
	root->previous = current_node;
 456:	80 91 14 01 	lds	r24, 0x0114
 45a:	90 91 15 01 	lds	r25, 0x0115
 45e:	20 91 18 01 	lds	r18, 0x0118
 462:	30 91 19 01 	lds	r19, 0x0119
 466:	fc 01       	movw	r30, r24
 468:	35 83       	std	Z+5, r19	; 0x05
 46a:	24 83       	std	Z+4, r18	; 0x04
	current_node  = root;
 46c:	80 91 14 01 	lds	r24, 0x0114
 470:	90 91 15 01 	lds	r25, 0x0115
 474:	90 93 19 01 	sts	0x0119, r25
 478:	80 93 18 01 	sts	0x0118, r24

	//allow interrupts
	sei();
 47c:	78 94       	sei
	
	while (1)
	{
		// we have a working Timer
		counter++;
 47e:	80 91 0a 01 	lds	r24, 0x010A
 482:	90 91 0b 01 	lds	r25, 0x010B
 486:	01 96       	adiw	r24, 0x01	; 1
 488:	90 93 0b 01 	sts	0x010B, r25
 48c:	80 93 0a 01 	sts	0x010A, r24
	}
 490:	f6 cf       	rjmp	.-20     	; 0x47e <main+0x108>

00000492 <sleep>:
	
}


void * sleep(long time){
 492:	7b 01       	movw	r14, r22
 494:	8c 01       	movw	r16, r24
	current_node->task->sleepCounter = (time * kernel_settings.isrTicks) * 2 + kernel_settings.isrTicks;
 496:	80 91 18 01 	lds	r24, 0x0118
 49a:	90 91 19 01 	lds	r25, 0x0119
 49e:	dc 01       	movw	r26, r24
 4a0:	ed 91       	ld	r30, X+
 4a2:	fc 91       	ld	r31, X
 4a4:	80 91 12 01 	lds	r24, 0x0112
 4a8:	90 91 13 01 	lds	r25, 0x0113
 4ac:	09 2e       	mov	r0, r25
 4ae:	00 0c       	add	r0, r0
 4b0:	aa 0b       	sbc	r26, r26
 4b2:	bb 0b       	sbc	r27, r27
 4b4:	9c 01       	movw	r18, r24
 4b6:	ad 01       	movw	r20, r26
 4b8:	c8 01       	movw	r24, r16
 4ba:	b7 01       	movw	r22, r14
 4bc:	0e 94 e1 04 	call	0x9c2	; 0x9c2 <__mulsi3>
 4c0:	dc 01       	movw	r26, r24
 4c2:	cb 01       	movw	r24, r22
 4c4:	9c 01       	movw	r18, r24
 4c6:	ad 01       	movw	r20, r26
 4c8:	22 0f       	add	r18, r18
 4ca:	33 1f       	adc	r19, r19
 4cc:	44 1f       	adc	r20, r20
 4ce:	55 1f       	adc	r21, r21
 4d0:	80 91 12 01 	lds	r24, 0x0112
 4d4:	90 91 13 01 	lds	r25, 0x0113
 4d8:	09 2e       	mov	r0, r25
 4da:	00 0c       	add	r0, r0
 4dc:	aa 0b       	sbc	r26, r26
 4de:	bb 0b       	sbc	r27, r27
 4e0:	82 0f       	add	r24, r18
 4e2:	93 1f       	adc	r25, r19
 4e4:	a4 1f       	adc	r26, r20
 4e6:	b5 1f       	adc	r27, r21
 4e8:	82 8b       	std	Z+18, r24	; 0x12
 4ea:	93 8b       	std	Z+19, r25	; 0x13
 4ec:	a4 8b       	std	Z+20, r26	; 0x14
 4ee:	b5 8b       	std	Z+21, r27	; 0x15
	current_node->previous->next = current_node->next;
 4f0:	80 91 18 01 	lds	r24, 0x0118
 4f4:	90 91 19 01 	lds	r25, 0x0119
 4f8:	fc 01       	movw	r30, r24
 4fa:	84 81       	ldd	r24, Z+4	; 0x04
 4fc:	95 81       	ldd	r25, Z+5	; 0x05
 4fe:	20 91 18 01 	lds	r18, 0x0118
 502:	30 91 19 01 	lds	r19, 0x0119
 506:	d9 01       	movw	r26, r18
 508:	12 96       	adiw	r26, 0x02	; 2
 50a:	2d 91       	ld	r18, X+
 50c:	3c 91       	ld	r19, X
 50e:	13 97       	sbiw	r26, 0x03	; 3
 510:	fc 01       	movw	r30, r24
 512:	33 83       	std	Z+3, r19	; 0x03
 514:	22 83       	std	Z+2, r18	; 0x02
	current_node->next->previous = current_node->previous;
 516:	80 91 18 01 	lds	r24, 0x0118
 51a:	90 91 19 01 	lds	r25, 0x0119
 51e:	dc 01       	movw	r26, r24
 520:	12 96       	adiw	r26, 0x02	; 2
 522:	8d 91       	ld	r24, X+
 524:	9c 91       	ld	r25, X
 526:	13 97       	sbiw	r26, 0x03	; 3
 528:	20 91 18 01 	lds	r18, 0x0118
 52c:	30 91 19 01 	lds	r19, 0x0119
 530:	f9 01       	movw	r30, r18
 532:	24 81       	ldd	r18, Z+4	; 0x04
 534:	35 81       	ldd	r19, Z+5	; 0x05
 536:	dc 01       	movw	r26, r24
 538:	15 96       	adiw	r26, 0x05	; 5
 53a:	3c 93       	st	X, r19
 53c:	2e 93       	st	-X, r18
 53e:	14 97       	sbiw	r26, 0x04	; 4
	current_node->task->sleeping = 1;
 540:	80 91 18 01 	lds	r24, 0x0118
 544:	90 91 19 01 	lds	r25, 0x0119
 548:	fc 01       	movw	r30, r24
 54a:	80 81       	ld	r24, Z
 54c:	91 81       	ldd	r25, Z+1	; 0x01
 54e:	21 e0       	ldi	r18, 0x01	; 1
 550:	30 e0       	ldi	r19, 0x00	; 0
 552:	dc 01       	movw	r26, r24
 554:	57 96       	adiw	r26, 0x17	; 23
 556:	3c 93       	st	X, r19
 558:	2e 93       	st	-X, r18
 55a:	56 97       	sbiw	r26, 0x16	; 22
	//Tell the ISR we are comming back early because a task is blocked
	returnFromBlocked = 1;
 55c:	81 e0       	ldi	r24, 0x01	; 1
 55e:	90 e0       	ldi	r25, 0x00	; 0
 560:	90 93 0d 01 	sts	0x010D, r25
 564:	80 93 0c 01 	sts	0x010C, r24
	asm("ijmp" :: "z" (TIMER1_COMPA_vect));
 568:	88 eb       	ldi	r24, 0xB8	; 184
 56a:	92 e0       	ldi	r25, 0x02	; 2
 56c:	fc 01       	movw	r30, r24
 56e:	09 94       	ijmp

00000570 <__vector_11>:

ISR (TIMER1_COMPA_vect)
{
	static int dispatcher = 1;
	//Disable interrupts
	cli();
 570:	f8 94       	cli
	
	if(returnFromBlocked){
 572:	80 91 0c 01 	lds	r24, 0x010C
 576:	90 91 0d 01 	lds	r25, 0x010D
 57a:	89 2b       	or	r24, r25
 57c:	59 f0       	breq	.+22     	; 0x594 <__vector_11+0x24>
		dispatcher = 1;
 57e:	81 e0       	ldi	r24, 0x01	; 1
 580:	90 e0       	ldi	r25, 0x00	; 0
 582:	90 93 09 01 	sts	0x0109, r25
 586:	80 93 08 01 	sts	0x0108, r24
		returnFromBlocked = 0;
 58a:	10 92 0d 01 	sts	0x010D, r1
 58e:	10 92 0c 01 	sts	0x010C, r1
 592:	0a c0       	rjmp	.+20     	; 0x5a8 <__vector_11+0x38>
	} else {		
		//Toggle dispatcher every 1 ms
		dispatcher ^= 1;
 594:	80 91 08 01 	lds	r24, 0x0108
 598:	90 91 09 01 	lds	r25, 0x0109
 59c:	01 e0       	ldi	r16, 0x01	; 1
 59e:	80 27       	eor	r24, r16
 5a0:	90 93 09 01 	sts	0x0109, r25
 5a4:	80 93 08 01 	sts	0x0108, r24
	}
	//update timers
	//TODO
	if(root->task->sleepCounter > 0){
 5a8:	80 91 14 01 	lds	r24, 0x0114
 5ac:	90 91 15 01 	lds	r25, 0x0115
 5b0:	fc 01       	movw	r30, r24
 5b2:	80 81       	ld	r24, Z
 5b4:	91 81       	ldd	r25, Z+1	; 0x01
 5b6:	fc 01       	movw	r30, r24
 5b8:	82 89       	ldd	r24, Z+18	; 0x12
 5ba:	93 89       	ldd	r25, Z+19	; 0x13
 5bc:	a4 89       	ldd	r26, Z+20	; 0x14
 5be:	b5 89       	ldd	r27, Z+21	; 0x15
 5c0:	18 16       	cp	r1, r24
 5c2:	19 06       	cpc	r1, r25
 5c4:	1a 06       	cpc	r1, r26
 5c6:	1b 06       	cpc	r1, r27
 5c8:	4c f5       	brge	.+82     	; 0x61c <__vector_11+0xac>
		root->task->sleepCounter -= (kernel_settings.isrTicks);
 5ca:	80 91 14 01 	lds	r24, 0x0114
 5ce:	90 91 15 01 	lds	r25, 0x0115
 5d2:	fc 01       	movw	r30, r24
 5d4:	60 81       	ld	r22, Z
 5d6:	71 81       	ldd	r23, Z+1	; 0x01
 5d8:	80 91 14 01 	lds	r24, 0x0114
 5dc:	90 91 15 01 	lds	r25, 0x0115
 5e0:	fc 01       	movw	r30, r24
 5e2:	80 81       	ld	r24, Z
 5e4:	91 81       	ldd	r25, Z+1	; 0x01
 5e6:	fc 01       	movw	r30, r24
 5e8:	22 89       	ldd	r18, Z+18	; 0x12
 5ea:	33 89       	ldd	r19, Z+19	; 0x13
 5ec:	44 89       	ldd	r20, Z+20	; 0x14
 5ee:	55 89       	ldd	r21, Z+21	; 0x15
 5f0:	80 91 12 01 	lds	r24, 0x0112
 5f4:	90 91 13 01 	lds	r25, 0x0113
 5f8:	09 2e       	mov	r0, r25
 5fa:	00 0c       	add	r0, r0
 5fc:	aa 0b       	sbc	r26, r26
 5fe:	bb 0b       	sbc	r27, r27
 600:	79 01       	movw	r14, r18
 602:	8a 01       	movw	r16, r20
 604:	e8 1a       	sub	r14, r24
 606:	f9 0a       	sbc	r15, r25
 608:	0a 0b       	sbc	r16, r26
 60a:	1b 0b       	sbc	r17, r27
 60c:	d8 01       	movw	r26, r16
 60e:	c7 01       	movw	r24, r14
 610:	fb 01       	movw	r30, r22
 612:	82 8b       	std	Z+18, r24	; 0x12
 614:	93 8b       	std	Z+19, r25	; 0x13
 616:	a4 8b       	std	Z+20, r26	; 0x14
 618:	b5 8b       	std	Z+21, r27	; 0x15
 61a:	4f c0       	rjmp	.+158    	; 0x6ba <__vector_11+0x14a>
	} else if(root->task->sleeping){
 61c:	80 91 14 01 	lds	r24, 0x0114
 620:	90 91 15 01 	lds	r25, 0x0115
 624:	fc 01       	movw	r30, r24
 626:	80 81       	ld	r24, Z
 628:	91 81       	ldd	r25, Z+1	; 0x01
 62a:	fc 01       	movw	r30, r24
 62c:	86 89       	ldd	r24, Z+22	; 0x16
 62e:	97 89       	ldd	r25, Z+23	; 0x17
 630:	89 2b       	or	r24, r25
 632:	09 f4       	brne	.+2      	; 0x636 <__vector_11+0xc6>
 634:	42 c0       	rjmp	.+132    	; 0x6ba <__vector_11+0x14a>
		//Reset the sleep if < 0
		root->task->sleepCounter = 0;
 636:	80 91 14 01 	lds	r24, 0x0114
 63a:	90 91 15 01 	lds	r25, 0x0115
 63e:	fc 01       	movw	r30, r24
 640:	80 81       	ld	r24, Z
 642:	91 81       	ldd	r25, Z+1	; 0x01
 644:	fc 01       	movw	r30, r24
 646:	12 8a       	std	Z+18, r1	; 0x12
 648:	13 8a       	std	Z+19, r1	; 0x13
 64a:	14 8a       	std	Z+20, r1	; 0x14
 64c:	15 8a       	std	Z+21, r1	; 0x15
		current_node->next = root;
 64e:	80 91 18 01 	lds	r24, 0x0118
 652:	90 91 19 01 	lds	r25, 0x0119
 656:	20 91 14 01 	lds	r18, 0x0114
 65a:	30 91 15 01 	lds	r19, 0x0115
 65e:	fc 01       	movw	r30, r24
 660:	33 83       	std	Z+3, r19	; 0x03
 662:	22 83       	std	Z+2, r18	; 0x02
		current_node->previous = root;
 664:	80 91 18 01 	lds	r24, 0x0118
 668:	90 91 19 01 	lds	r25, 0x0119
 66c:	20 91 14 01 	lds	r18, 0x0114
 670:	30 91 15 01 	lds	r19, 0x0115
 674:	fc 01       	movw	r30, r24
 676:	35 83       	std	Z+5, r19	; 0x05
 678:	24 83       	std	Z+4, r18	; 0x04
		root->next = current_node;
 67a:	80 91 14 01 	lds	r24, 0x0114
 67e:	90 91 15 01 	lds	r25, 0x0115
 682:	20 91 18 01 	lds	r18, 0x0118
 686:	30 91 19 01 	lds	r19, 0x0119
 68a:	fc 01       	movw	r30, r24
 68c:	33 83       	std	Z+3, r19	; 0x03
 68e:	22 83       	std	Z+2, r18	; 0x02
		root->previous = current_node;
 690:	80 91 14 01 	lds	r24, 0x0114
 694:	90 91 15 01 	lds	r25, 0x0115
 698:	20 91 18 01 	lds	r18, 0x0118
 69c:	30 91 19 01 	lds	r19, 0x0119
 6a0:	fc 01       	movw	r30, r24
 6a2:	35 83       	std	Z+5, r19	; 0x05
 6a4:	24 83       	std	Z+4, r18	; 0x04
		root->task->sleeping = 0;
 6a6:	80 91 14 01 	lds	r24, 0x0114
 6aa:	90 91 15 01 	lds	r25, 0x0115
 6ae:	fc 01       	movw	r30, r24
 6b0:	80 81       	ld	r24, Z
 6b2:	91 81       	ldd	r25, Z+1	; 0x01
 6b4:	fc 01       	movw	r30, r24
 6b6:	17 8a       	std	Z+23, r1	; 0x17
 6b8:	16 8a       	std	Z+22, r1	; 0x16
	}
	
	//Do not switch context on first run
	if(firstrun){
 6ba:	80 91 06 01 	lds	r24, 0x0106
 6be:	90 91 07 01 	lds	r25, 0x0107
 6c2:	89 2b       	or	r24, r25
 6c4:	09 f4       	brne	.+2      	; 0x6c8 <__vector_11+0x158>
 6c6:	3e c0       	rjmp	.+124    	; 0x744 <__vector_11+0x1d4>
		//Only run once
		firstrun = 0;
 6c8:	10 92 07 01 	sts	0x0107, r1
 6cc:	10 92 06 01 	sts	0x0106, r1
		//Set stack pointer
		asm volatile("MOV r0, %[lowAddress] " :: [lowAddress] "r" (current_node->task->spl));
 6d0:	80 91 18 01 	lds	r24, 0x0118
 6d4:	90 91 19 01 	lds	r25, 0x0119
 6d8:	fc 01       	movw	r30, r24
 6da:	80 81       	ld	r24, Z
 6dc:	91 81       	ldd	r25, Z+1	; 0x01
 6de:	fc 01       	movw	r30, r24
 6e0:	84 81       	ldd	r24, Z+4	; 0x04
 6e2:	95 81       	ldd	r25, Z+5	; 0x05
 6e4:	08 2e       	mov	r0, r24
		asm volatile("OUT __SP_L__, r0");
 6e6:	0d be       	out	0x3d, r0	; 61
		asm volatile("MOV r0, %[highAddress] " :: [highAddress] "r" (current_node->task->sph));
 6e8:	80 91 18 01 	lds	r24, 0x0118
 6ec:	90 91 19 01 	lds	r25, 0x0119
 6f0:	fc 01       	movw	r30, r24
 6f2:	80 81       	ld	r24, Z
 6f4:	91 81       	ldd	r25, Z+1	; 0x01
 6f6:	fc 01       	movw	r30, r24
 6f8:	82 81       	ldd	r24, Z+2	; 0x02
 6fa:	93 81       	ldd	r25, Z+3	; 0x03
 6fc:	08 2e       	mov	r0, r24
		asm volatile("OUT __SP_H__, r0");
 6fe:	0e be       	out	0x3e, r0	; 62
		
		asm("MOV R18, %[lowAdress]" :: [lowAdress] "r" (current_node->task->pcl));
 700:	80 91 18 01 	lds	r24, 0x0118
 704:	90 91 19 01 	lds	r25, 0x0119
 708:	fc 01       	movw	r30, r24
 70a:	80 81       	ld	r24, Z
 70c:	91 81       	ldd	r25, Z+1	; 0x01
 70e:	fc 01       	movw	r30, r24
 710:	80 85       	ldd	r24, Z+8	; 0x08
 712:	91 85       	ldd	r25, Z+9	; 0x09
 714:	28 2f       	mov	r18, r24
		asm("PUSH R18");
 716:	2f 93       	push	r18
		asm("MOV R18, %[highAdress]" :: [highAdress] "r" (current_node->task->pch));
 718:	80 91 18 01 	lds	r24, 0x0118
 71c:	90 91 19 01 	lds	r25, 0x0119
 720:	fc 01       	movw	r30, r24
 722:	80 81       	ld	r24, Z
 724:	91 81       	ldd	r25, Z+1	; 0x01
 726:	fc 01       	movw	r30, r24
 728:	82 85       	ldd	r24, Z+10	; 0x0a
 72a:	93 85       	ldd	r25, Z+11	; 0x0b
 72c:	28 2f       	mov	r18, r24
		asm("PUSH 18");
 72e:	2f 93       	push	r18
		current_node->task->firsttime = 0;
 730:	80 91 18 01 	lds	r24, 0x0118
 734:	90 91 19 01 	lds	r25, 0x0119
 738:	fc 01       	movw	r30, r24
 73a:	80 81       	ld	r24, Z
 73c:	91 81       	ldd	r25, Z+1	; 0x01
 73e:	fc 01       	movw	r30, r24
 740:	17 86       	std	Z+15, r1	; 0x0f
 742:	16 86       	std	Z+14, r1	; 0x0e
		
	}
	if(dispatcher) {
 744:	80 91 08 01 	lds	r24, 0x0108
 748:	90 91 09 01 	lds	r25, 0x0109
 74c:	00 97       	sbiw	r24, 0x00	; 0
 74e:	09 f4       	brne	.+2      	; 0x752 <__vector_11+0x1e2>
 750:	36 c1       	rjmp	.+620    	; 0x9be <__stack+0xbf>
		//Save context only if task is not marked for removal
		if(!current_node->task->markedforremoval) {
 752:	80 91 18 01 	lds	r24, 0x0118
 756:	90 91 19 01 	lds	r25, 0x0119
 75a:	fc 01       	movw	r30, r24
 75c:	80 81       	ld	r24, Z
 75e:	91 81       	ldd	r25, Z+1	; 0x01
 760:	fc 01       	movw	r30, r24
 762:	80 89       	ldd	r24, Z+16	; 0x10
 764:	91 89       	ldd	r25, Z+17	; 0x11
 766:	89 2b       	or	r24, r25
 768:	09 f0       	breq	.+2      	; 0x76c <__vector_11+0x1fc>
 76a:	40 c0       	rjmp	.+128    	; 0x7ec <__vector_11+0x27c>
			//Save context
			asm volatile (
 76c:	0f 92       	push	r0
 76e:	0f b6       	in	r0, 0x3f	; 63
 770:	f8 94       	cli
 772:	0f 92       	push	r0
 774:	1f 92       	push	r1
 776:	11 24       	eor	r1, r1
 778:	2f 92       	push	r2
 77a:	3f 92       	push	r3
 77c:	4f 92       	push	r4
 77e:	5f 92       	push	r5
 780:	6f 92       	push	r6
 782:	7f 92       	push	r7
 784:	8f 92       	push	r8
 786:	9f 92       	push	r9
 788:	af 92       	push	r10
 78a:	bf 92       	push	r11
 78c:	cf 92       	push	r12
 78e:	df 92       	push	r13
 790:	ef 92       	push	r14
 792:	ff 92       	push	r15
 794:	0f 93       	push	r16
 796:	1f 93       	push	r17
 798:	2f 93       	push	r18
 79a:	3f 93       	push	r19
 79c:	4f 93       	push	r20
 79e:	5f 93       	push	r21
 7a0:	6f 93       	push	r22
 7a2:	7f 93       	push	r23
 7a4:	8f 93       	push	r24
 7a6:	9f 93       	push	r25
 7a8:	af 93       	push	r26
 7aa:	bf 93       	push	r27
 7ac:	cf 93       	push	r28
 7ae:	df 93       	push	r29
 7b0:	ef 93       	push	r30
 7b2:	ff 93       	push	r31
			"push  r30                   \n\t" \
			"push  r31                   \n\t");
			
			//Store stackpointer in TCB
			
			asm volatile("in    r2, __SP_L__");
 7b4:	2d b6       	in	r2, 0x3d	; 61
			current_node->task->spl = reg1;
 7b6:	80 91 18 01 	lds	r24, 0x0118
 7ba:	90 91 19 01 	lds	r25, 0x0119
 7be:	fc 01       	movw	r30, r24
 7c0:	80 81       	ld	r24, Z
 7c2:	91 81       	ldd	r25, Z+1	; 0x01
 7c4:	22 2d       	mov	r18, r2
 7c6:	22 2f       	mov	r18, r18
 7c8:	30 e0       	ldi	r19, 0x00	; 0
 7ca:	fc 01       	movw	r30, r24
 7cc:	35 83       	std	Z+5, r19	; 0x05
 7ce:	24 83       	std	Z+4, r18	; 0x04
			//asm volatile("STS %0,R25", :: "=r" (a));
			//asm volatile("MOV %[lowAdress], r0 ": [lowAdress] "=r" (a) :);
			//current_node->task->spl = a;
			//current_node->task->spl = regReader;
			
			asm volatile("in    r3, __SP_H__");
 7d0:	3e b6       	in	r3, 0x3e	; 62
			current_node->task->sph = reg2;
 7d2:	80 91 18 01 	lds	r24, 0x0118
 7d6:	90 91 19 01 	lds	r25, 0x0119
 7da:	fc 01       	movw	r30, r24
 7dc:	80 81       	ld	r24, Z
 7de:	91 81       	ldd	r25, Z+1	; 0x01
 7e0:	23 2d       	mov	r18, r3
 7e2:	22 2f       	mov	r18, r18
 7e4:	30 e0       	ldi	r19, 0x00	; 0
 7e6:	fc 01       	movw	r30, r24
 7e8:	33 83       	std	Z+3, r19	; 0x03
 7ea:	22 83       	std	Z+2, r18	; 0x02
			//asm volatile("MOV %[highAdress], r0 ": [highAdress] "=r" (b) : );
			//current_node->task->sph = b;
		}
	
		//Select the current task
		if(current_node->next->task->markedforremoval){
 7ec:	80 91 18 01 	lds	r24, 0x0118
 7f0:	90 91 19 01 	lds	r25, 0x0119
 7f4:	fc 01       	movw	r30, r24
 7f6:	82 81       	ldd	r24, Z+2	; 0x02
 7f8:	93 81       	ldd	r25, Z+3	; 0x03
 7fa:	fc 01       	movw	r30, r24
 7fc:	80 81       	ld	r24, Z
 7fe:	91 81       	ldd	r25, Z+1	; 0x01
 800:	fc 01       	movw	r30, r24
 802:	80 89       	ldd	r24, Z+16	; 0x10
 804:	91 89       	ldd	r25, Z+17	; 0x11
 806:	89 2b       	or	r24, r25
 808:	09 f4       	brne	.+2      	; 0x80c <__vector_11+0x29c>
 80a:	4c c0       	rjmp	.+152    	; 0x8a4 <__vector_11+0x334>
			//Remember the task for removal
			previous_node = current_node->next;
 80c:	80 91 18 01 	lds	r24, 0x0118
 810:	90 91 19 01 	lds	r25, 0x0119
 814:	fc 01       	movw	r30, r24
 816:	82 81       	ldd	r24, Z+2	; 0x02
 818:	93 81       	ldd	r25, Z+3	; 0x03
 81a:	90 93 17 01 	sts	0x0117, r25
 81e:	80 93 16 01 	sts	0x0116, r24
			//Skip the task for removal
			current_node->next = current_node->next->next;
 822:	80 91 18 01 	lds	r24, 0x0118
 826:	90 91 19 01 	lds	r25, 0x0119
 82a:	20 91 18 01 	lds	r18, 0x0118
 82e:	30 91 19 01 	lds	r19, 0x0119
 832:	f9 01       	movw	r30, r18
 834:	22 81       	ldd	r18, Z+2	; 0x02
 836:	33 81       	ldd	r19, Z+3	; 0x03
 838:	f9 01       	movw	r30, r18
 83a:	22 81       	ldd	r18, Z+2	; 0x02
 83c:	33 81       	ldd	r19, Z+3	; 0x03
 83e:	fc 01       	movw	r30, r24
 840:	33 83       	std	Z+3, r19	; 0x03
 842:	22 83       	std	Z+2, r18	; 0x02
			//Set the  previous node to the current node
			current_node->next->previous = current_node;
 844:	80 91 18 01 	lds	r24, 0x0118
 848:	90 91 19 01 	lds	r25, 0x0119
 84c:	fc 01       	movw	r30, r24
 84e:	82 81       	ldd	r24, Z+2	; 0x02
 850:	93 81       	ldd	r25, Z+3	; 0x03
 852:	20 91 18 01 	lds	r18, 0x0118
 856:	30 91 19 01 	lds	r19, 0x0119
 85a:	fc 01       	movw	r30, r24
 85c:	35 83       	std	Z+5, r19	; 0x05
 85e:	24 83       	std	Z+4, r18	; 0x04
			//Select the next node
			current_node = current_node->next;
 860:	80 91 18 01 	lds	r24, 0x0118
 864:	90 91 19 01 	lds	r25, 0x0119
 868:	fc 01       	movw	r30, r24
 86a:	82 81       	ldd	r24, Z+2	; 0x02
 86c:	93 81       	ldd	r25, Z+3	; 0x03
 86e:	90 93 19 01 	sts	0x0119, r25
 872:	80 93 18 01 	sts	0x0118, r24
			
			//Delete the task to be removed
			free(previous_node->task);
 876:	80 91 16 01 	lds	r24, 0x0116
 87a:	90 91 17 01 	lds	r25, 0x0117
 87e:	fc 01       	movw	r30, r24
 880:	80 81       	ld	r24, Z
 882:	91 81       	ldd	r25, Z+1	; 0x01
 884:	0e 94 a0 05 	call	0xb40	; 0xb40 <free>
			previous_node->next = 0;
 888:	80 91 16 01 	lds	r24, 0x0116
 88c:	90 91 17 01 	lds	r25, 0x0117
 890:	fc 01       	movw	r30, r24
 892:	13 82       	std	Z+3, r1	; 0x03
 894:	12 82       	std	Z+2, r1	; 0x02
			free(previous_node);
 896:	80 91 16 01 	lds	r24, 0x0116
 89a:	90 91 17 01 	lds	r25, 0x0117
 89e:	0e 94 a0 05 	call	0xb40	; 0xb40 <free>
 8a2:	0b c0       	rjmp	.+22     	; 0x8ba <__vector_11+0x34a>
		} else {
			current_node = current_node->next;
 8a4:	80 91 18 01 	lds	r24, 0x0118
 8a8:	90 91 19 01 	lds	r25, 0x0119
 8ac:	fc 01       	movw	r30, r24
 8ae:	82 81       	ldd	r24, Z+2	; 0x02
 8b0:	93 81       	ldd	r25, Z+3	; 0x03
 8b2:	90 93 19 01 	sts	0x0119, r25
 8b6:	80 93 18 01 	sts	0x0118, r24
		}
		
		//If the task is running for the first time we do not need to load the context from the stack
		if(current_node->task->firsttime){
 8ba:	80 91 18 01 	lds	r24, 0x0118
 8be:	90 91 19 01 	lds	r25, 0x0119
 8c2:	fc 01       	movw	r30, r24
 8c4:	80 81       	ld	r24, Z
 8c6:	91 81       	ldd	r25, Z+1	; 0x01
 8c8:	fc 01       	movw	r30, r24
 8ca:	86 85       	ldd	r24, Z+14	; 0x0e
 8cc:	97 85       	ldd	r25, Z+15	; 0x0f
 8ce:	89 2b       	or	r24, r25
 8d0:	09 f4       	brne	.+2      	; 0x8d4 <__vector_11+0x364>
 8d2:	3b c0       	rjmp	.+118    	; 0x94a <__stack+0x4b>
			asm volatile("MOV r0, %[lowAddress] " :: [lowAddress] "r" (current_node->task->spl));
 8d4:	80 91 18 01 	lds	r24, 0x0118
 8d8:	90 91 19 01 	lds	r25, 0x0119
 8dc:	fc 01       	movw	r30, r24
 8de:	80 81       	ld	r24, Z
 8e0:	91 81       	ldd	r25, Z+1	; 0x01
 8e2:	fc 01       	movw	r30, r24
 8e4:	84 81       	ldd	r24, Z+4	; 0x04
 8e6:	95 81       	ldd	r25, Z+5	; 0x05
 8e8:	08 2e       	mov	r0, r24
			asm volatile("OUT __SP_L__, r0");
 8ea:	0d be       	out	0x3d, r0	; 61
			asm volatile("MOV r0, %[highAddress] " :: [highAddress] "r" (current_node->task->sph));
 8ec:	80 91 18 01 	lds	r24, 0x0118
 8f0:	90 91 19 01 	lds	r25, 0x0119
 8f4:	fc 01       	movw	r30, r24
 8f6:	80 81       	ld	r24, Z
 8f8:	91 81       	ldd	r25, Z+1	; 0x01
 8fa:	fc 01       	movw	r30, r24
 8fc:	82 81       	ldd	r24, Z+2	; 0x02
 8fe:	93 81       	ldd	r25, Z+3	; 0x03
 900:	08 2e       	mov	r0, r24
			asm volatile("OUT __SP_H__, r0");
 902:	0e be       	out	0x3e, r0	; 62
			
			asm("MOV R18, %[lowAdress]" :: [lowAdress] "r" (current_node->task->pcl));
 904:	80 91 18 01 	lds	r24, 0x0118
 908:	90 91 19 01 	lds	r25, 0x0119
 90c:	fc 01       	movw	r30, r24
 90e:	80 81       	ld	r24, Z
 910:	91 81       	ldd	r25, Z+1	; 0x01
 912:	fc 01       	movw	r30, r24
 914:	80 85       	ldd	r24, Z+8	; 0x08
 916:	91 85       	ldd	r25, Z+9	; 0x09
 918:	28 2f       	mov	r18, r24
			asm("PUSH R18");
 91a:	2f 93       	push	r18
			asm("MOV R18, %[highAdress]" :: [highAdress] "r" (current_node->task->pch));
 91c:	80 91 18 01 	lds	r24, 0x0118
 920:	90 91 19 01 	lds	r25, 0x0119
 924:	fc 01       	movw	r30, r24
 926:	80 81       	ld	r24, Z
 928:	91 81       	ldd	r25, Z+1	; 0x01
 92a:	fc 01       	movw	r30, r24
 92c:	82 85       	ldd	r24, Z+10	; 0x0a
 92e:	93 85       	ldd	r25, Z+11	; 0x0b
 930:	28 2f       	mov	r18, r24
			asm("PUSH 18");
 932:	2f 93       	push	r18
			current_node->task->firsttime = 0;
 934:	80 91 18 01 	lds	r24, 0x0118
 938:	90 91 19 01 	lds	r25, 0x0119
 93c:	fc 01       	movw	r30, r24
 93e:	80 81       	ld	r24, Z
 940:	91 81       	ldd	r25, Z+1	; 0x01
 942:	fc 01       	movw	r30, r24
 944:	17 86       	std	Z+15, r1	; 0x0f
 946:	16 86       	std	Z+14, r1	; 0x0e
 948:	3a c0       	rjmp	.+116    	; 0x9be <__stack+0xbf>
		} else {
			//Load stack pointers
			asm volatile("MOV r0, %[lowAddress] " :: [lowAddress] "r" (current_node->task->spl));
 94a:	80 91 18 01 	lds	r24, 0x0118
 94e:	90 91 19 01 	lds	r25, 0x0119
 952:	fc 01       	movw	r30, r24
 954:	80 81       	ld	r24, Z
 956:	91 81       	ldd	r25, Z+1	; 0x01
 958:	fc 01       	movw	r30, r24
 95a:	84 81       	ldd	r24, Z+4	; 0x04
 95c:	95 81       	ldd	r25, Z+5	; 0x05
 95e:	08 2e       	mov	r0, r24
			asm volatile("OUT __SP_L__, r0");
 960:	0d be       	out	0x3d, r0	; 61
			asm volatile("MOV r0, %[highAddress] " :: [highAddress] "r" (current_node->task->sph));
 962:	80 91 18 01 	lds	r24, 0x0118
 966:	90 91 19 01 	lds	r25, 0x0119
 96a:	fc 01       	movw	r30, r24
 96c:	80 81       	ld	r24, Z
 96e:	91 81       	ldd	r25, Z+1	; 0x01
 970:	fc 01       	movw	r30, r24
 972:	82 81       	ldd	r24, Z+2	; 0x02
 974:	93 81       	ldd	r25, Z+3	; 0x03
 976:	08 2e       	mov	r0, r24
			asm volatile("OUT __SP_H__, r0");
 978:	0e be       	out	0x3e, r0	; 62
						
			//Load context
			asm volatile (
 97a:	ff 91       	pop	r31
 97c:	ef 91       	pop	r30
 97e:	df 91       	pop	r29
 980:	cf 91       	pop	r28
 982:	bf 91       	pop	r27
 984:	af 91       	pop	r26
 986:	9f 91       	pop	r25
 988:	8f 91       	pop	r24
 98a:	7f 91       	pop	r23
 98c:	6f 91       	pop	r22
 98e:	5f 91       	pop	r21
 990:	4f 91       	pop	r20
 992:	3f 91       	pop	r19
 994:	2f 91       	pop	r18
 996:	1f 91       	pop	r17
 998:	0f 91       	pop	r16
 99a:	ff 90       	pop	r15
 99c:	ef 90       	pop	r14
 99e:	df 90       	pop	r13
 9a0:	cf 90       	pop	r12
 9a2:	bf 90       	pop	r11
 9a4:	af 90       	pop	r10
 9a6:	9f 90       	pop	r9
 9a8:	8f 90       	pop	r8
 9aa:	7f 90       	pop	r7
 9ac:	6f 90       	pop	r6
 9ae:	5f 90       	pop	r5
 9b0:	4f 90       	pop	r4
 9b2:	3f 90       	pop	r3
 9b4:	2f 90       	pop	r2
 9b6:	1f 90       	pop	r1
 9b8:	0f 90       	pop	r0
 9ba:	0f be       	out	0x3f, r0	; 63
 9bc:	0f 90       	pop	r0
	//Set clocktimer
	//TCNT1  = 0;
	//Reset interruptbit
	//TIFR1 = 1 << 1;
	//Enable interrupts
	sei();
 9be:	78 94       	sei
	//Return to task
	reti();
 9c0:	18 95       	reti

000009c2 <__mulsi3>:
 9c2:	db 01       	movw	r26, r22
 9c4:	8f 93       	push	r24
 9c6:	9f 93       	push	r25
 9c8:	0e 94 f1 04 	call	0x9e2	; 0x9e2 <__muluhisi3>
 9cc:	bf 91       	pop	r27
 9ce:	af 91       	pop	r26
 9d0:	a2 9f       	mul	r26, r18
 9d2:	80 0d       	add	r24, r0
 9d4:	91 1d       	adc	r25, r1
 9d6:	a3 9f       	mul	r26, r19
 9d8:	90 0d       	add	r25, r0
 9da:	b2 9f       	mul	r27, r18
 9dc:	90 0d       	add	r25, r0
 9de:	11 24       	eor	r1, r1
 9e0:	08 95       	ret

000009e2 <__muluhisi3>:
 9e2:	0e 94 fc 04 	call	0x9f8	; 0x9f8 <__umulhisi3>
 9e6:	a5 9f       	mul	r26, r21
 9e8:	90 0d       	add	r25, r0
 9ea:	b4 9f       	mul	r27, r20
 9ec:	90 0d       	add	r25, r0
 9ee:	a4 9f       	mul	r26, r20
 9f0:	80 0d       	add	r24, r0
 9f2:	91 1d       	adc	r25, r1
 9f4:	11 24       	eor	r1, r1
 9f6:	08 95       	ret

000009f8 <__umulhisi3>:
 9f8:	a2 9f       	mul	r26, r18
 9fa:	b0 01       	movw	r22, r0
 9fc:	b3 9f       	mul	r27, r19
 9fe:	c0 01       	movw	r24, r0
 a00:	a3 9f       	mul	r26, r19
 a02:	70 0d       	add	r23, r0
 a04:	81 1d       	adc	r24, r1
 a06:	11 24       	eor	r1, r1
 a08:	91 1d       	adc	r25, r1
 a0a:	b2 9f       	mul	r27, r18
 a0c:	70 0d       	add	r23, r0
 a0e:	81 1d       	adc	r24, r1
 a10:	11 24       	eor	r1, r1
 a12:	91 1d       	adc	r25, r1
 a14:	08 95       	ret

00000a16 <malloc>:
 a16:	cf 93       	push	r28
 a18:	df 93       	push	r29
 a1a:	82 30       	cpi	r24, 0x02	; 2
 a1c:	91 05       	cpc	r25, r1
 a1e:	10 f4       	brcc	.+4      	; 0xa24 <malloc+0xe>
 a20:	82 e0       	ldi	r24, 0x02	; 2
 a22:	90 e0       	ldi	r25, 0x00	; 0
 a24:	e0 91 4c 01 	lds	r30, 0x014C
 a28:	f0 91 4d 01 	lds	r31, 0x014D
 a2c:	20 e0       	ldi	r18, 0x00	; 0
 a2e:	30 e0       	ldi	r19, 0x00	; 0
 a30:	c0 e0       	ldi	r28, 0x00	; 0
 a32:	d0 e0       	ldi	r29, 0x00	; 0
 a34:	30 97       	sbiw	r30, 0x00	; 0
 a36:	11 f1       	breq	.+68     	; 0xa7c <malloc+0x66>
 a38:	40 81       	ld	r20, Z
 a3a:	51 81       	ldd	r21, Z+1	; 0x01
 a3c:	48 17       	cp	r20, r24
 a3e:	59 07       	cpc	r21, r25
 a40:	c0 f0       	brcs	.+48     	; 0xa72 <malloc+0x5c>
 a42:	48 17       	cp	r20, r24
 a44:	59 07       	cpc	r21, r25
 a46:	61 f4       	brne	.+24     	; 0xa60 <malloc+0x4a>
 a48:	82 81       	ldd	r24, Z+2	; 0x02
 a4a:	93 81       	ldd	r25, Z+3	; 0x03
 a4c:	20 97       	sbiw	r28, 0x00	; 0
 a4e:	19 f0       	breq	.+6      	; 0xa56 <malloc+0x40>
 a50:	9b 83       	std	Y+3, r25	; 0x03
 a52:	8a 83       	std	Y+2, r24	; 0x02
 a54:	2b c0       	rjmp	.+86     	; 0xaac <malloc+0x96>
 a56:	90 93 4d 01 	sts	0x014D, r25
 a5a:	80 93 4c 01 	sts	0x014C, r24
 a5e:	26 c0       	rjmp	.+76     	; 0xaac <malloc+0x96>
 a60:	21 15       	cp	r18, r1
 a62:	31 05       	cpc	r19, r1
 a64:	19 f0       	breq	.+6      	; 0xa6c <malloc+0x56>
 a66:	42 17       	cp	r20, r18
 a68:	53 07       	cpc	r21, r19
 a6a:	18 f4       	brcc	.+6      	; 0xa72 <malloc+0x5c>
 a6c:	9a 01       	movw	r18, r20
 a6e:	be 01       	movw	r22, r28
 a70:	df 01       	movw	r26, r30
 a72:	ef 01       	movw	r28, r30
 a74:	02 80       	ldd	r0, Z+2	; 0x02
 a76:	f3 81       	ldd	r31, Z+3	; 0x03
 a78:	e0 2d       	mov	r30, r0
 a7a:	dc cf       	rjmp	.-72     	; 0xa34 <malloc+0x1e>
 a7c:	21 15       	cp	r18, r1
 a7e:	31 05       	cpc	r19, r1
 a80:	09 f1       	breq	.+66     	; 0xac4 <malloc+0xae>
 a82:	28 1b       	sub	r18, r24
 a84:	39 0b       	sbc	r19, r25
 a86:	24 30       	cpi	r18, 0x04	; 4
 a88:	31 05       	cpc	r19, r1
 a8a:	90 f4       	brcc	.+36     	; 0xab0 <malloc+0x9a>
 a8c:	12 96       	adiw	r26, 0x02	; 2
 a8e:	8d 91       	ld	r24, X+
 a90:	9c 91       	ld	r25, X
 a92:	13 97       	sbiw	r26, 0x03	; 3
 a94:	61 15       	cp	r22, r1
 a96:	71 05       	cpc	r23, r1
 a98:	21 f0       	breq	.+8      	; 0xaa2 <malloc+0x8c>
 a9a:	fb 01       	movw	r30, r22
 a9c:	93 83       	std	Z+3, r25	; 0x03
 a9e:	82 83       	std	Z+2, r24	; 0x02
 aa0:	04 c0       	rjmp	.+8      	; 0xaaa <malloc+0x94>
 aa2:	90 93 4d 01 	sts	0x014D, r25
 aa6:	80 93 4c 01 	sts	0x014C, r24
 aaa:	fd 01       	movw	r30, r26
 aac:	32 96       	adiw	r30, 0x02	; 2
 aae:	44 c0       	rjmp	.+136    	; 0xb38 <malloc+0x122>
 ab0:	fd 01       	movw	r30, r26
 ab2:	e2 0f       	add	r30, r18
 ab4:	f3 1f       	adc	r31, r19
 ab6:	81 93       	st	Z+, r24
 ab8:	91 93       	st	Z+, r25
 aba:	22 50       	subi	r18, 0x02	; 2
 abc:	31 09       	sbc	r19, r1
 abe:	2d 93       	st	X+, r18
 ac0:	3c 93       	st	X, r19
 ac2:	3a c0       	rjmp	.+116    	; 0xb38 <malloc+0x122>
 ac4:	20 91 4a 01 	lds	r18, 0x014A
 ac8:	30 91 4b 01 	lds	r19, 0x014B
 acc:	23 2b       	or	r18, r19
 ace:	41 f4       	brne	.+16     	; 0xae0 <malloc+0xca>
 ad0:	20 91 02 01 	lds	r18, 0x0102
 ad4:	30 91 03 01 	lds	r19, 0x0103
 ad8:	30 93 4b 01 	sts	0x014B, r19
 adc:	20 93 4a 01 	sts	0x014A, r18
 ae0:	20 91 00 01 	lds	r18, 0x0100
 ae4:	30 91 01 01 	lds	r19, 0x0101
 ae8:	21 15       	cp	r18, r1
 aea:	31 05       	cpc	r19, r1
 aec:	41 f4       	brne	.+16     	; 0xafe <malloc+0xe8>
 aee:	2d b7       	in	r18, 0x3d	; 61
 af0:	3e b7       	in	r19, 0x3e	; 62
 af2:	40 91 04 01 	lds	r20, 0x0104
 af6:	50 91 05 01 	lds	r21, 0x0105
 afa:	24 1b       	sub	r18, r20
 afc:	35 0b       	sbc	r19, r21
 afe:	e0 91 4a 01 	lds	r30, 0x014A
 b02:	f0 91 4b 01 	lds	r31, 0x014B
 b06:	e2 17       	cp	r30, r18
 b08:	f3 07       	cpc	r31, r19
 b0a:	a0 f4       	brcc	.+40     	; 0xb34 <malloc+0x11e>
 b0c:	2e 1b       	sub	r18, r30
 b0e:	3f 0b       	sbc	r19, r31
 b10:	28 17       	cp	r18, r24
 b12:	39 07       	cpc	r19, r25
 b14:	78 f0       	brcs	.+30     	; 0xb34 <malloc+0x11e>
 b16:	ac 01       	movw	r20, r24
 b18:	4e 5f       	subi	r20, 0xFE	; 254
 b1a:	5f 4f       	sbci	r21, 0xFF	; 255
 b1c:	24 17       	cp	r18, r20
 b1e:	35 07       	cpc	r19, r21
 b20:	48 f0       	brcs	.+18     	; 0xb34 <malloc+0x11e>
 b22:	4e 0f       	add	r20, r30
 b24:	5f 1f       	adc	r21, r31
 b26:	50 93 4b 01 	sts	0x014B, r21
 b2a:	40 93 4a 01 	sts	0x014A, r20
 b2e:	81 93       	st	Z+, r24
 b30:	91 93       	st	Z+, r25
 b32:	02 c0       	rjmp	.+4      	; 0xb38 <malloc+0x122>
 b34:	e0 e0       	ldi	r30, 0x00	; 0
 b36:	f0 e0       	ldi	r31, 0x00	; 0
 b38:	cf 01       	movw	r24, r30
 b3a:	df 91       	pop	r29
 b3c:	cf 91       	pop	r28
 b3e:	08 95       	ret

00000b40 <free>:
 b40:	0f 93       	push	r16
 b42:	1f 93       	push	r17
 b44:	cf 93       	push	r28
 b46:	df 93       	push	r29
 b48:	00 97       	sbiw	r24, 0x00	; 0
 b4a:	09 f4       	brne	.+2      	; 0xb4e <free+0xe>
 b4c:	8c c0       	rjmp	.+280    	; 0xc66 <free+0x126>
 b4e:	fc 01       	movw	r30, r24
 b50:	32 97       	sbiw	r30, 0x02	; 2
 b52:	13 82       	std	Z+3, r1	; 0x03
 b54:	12 82       	std	Z+2, r1	; 0x02
 b56:	00 91 4c 01 	lds	r16, 0x014C
 b5a:	10 91 4d 01 	lds	r17, 0x014D
 b5e:	01 15       	cp	r16, r1
 b60:	11 05       	cpc	r17, r1
 b62:	81 f4       	brne	.+32     	; 0xb84 <free+0x44>
 b64:	20 81       	ld	r18, Z
 b66:	31 81       	ldd	r19, Z+1	; 0x01
 b68:	82 0f       	add	r24, r18
 b6a:	93 1f       	adc	r25, r19
 b6c:	20 91 4a 01 	lds	r18, 0x014A
 b70:	30 91 4b 01 	lds	r19, 0x014B
 b74:	28 17       	cp	r18, r24
 b76:	39 07       	cpc	r19, r25
 b78:	79 f5       	brne	.+94     	; 0xbd8 <free+0x98>
 b7a:	f0 93 4b 01 	sts	0x014B, r31
 b7e:	e0 93 4a 01 	sts	0x014A, r30
 b82:	71 c0       	rjmp	.+226    	; 0xc66 <free+0x126>
 b84:	d8 01       	movw	r26, r16
 b86:	40 e0       	ldi	r20, 0x00	; 0
 b88:	50 e0       	ldi	r21, 0x00	; 0
 b8a:	ae 17       	cp	r26, r30
 b8c:	bf 07       	cpc	r27, r31
 b8e:	50 f4       	brcc	.+20     	; 0xba4 <free+0x64>
 b90:	12 96       	adiw	r26, 0x02	; 2
 b92:	2d 91       	ld	r18, X+
 b94:	3c 91       	ld	r19, X
 b96:	13 97       	sbiw	r26, 0x03	; 3
 b98:	ad 01       	movw	r20, r26
 b9a:	21 15       	cp	r18, r1
 b9c:	31 05       	cpc	r19, r1
 b9e:	09 f1       	breq	.+66     	; 0xbe2 <free+0xa2>
 ba0:	d9 01       	movw	r26, r18
 ba2:	f3 cf       	rjmp	.-26     	; 0xb8a <free+0x4a>
 ba4:	9d 01       	movw	r18, r26
 ba6:	da 01       	movw	r26, r20
 ba8:	33 83       	std	Z+3, r19	; 0x03
 baa:	22 83       	std	Z+2, r18	; 0x02
 bac:	60 81       	ld	r22, Z
 bae:	71 81       	ldd	r23, Z+1	; 0x01
 bb0:	86 0f       	add	r24, r22
 bb2:	97 1f       	adc	r25, r23
 bb4:	82 17       	cp	r24, r18
 bb6:	93 07       	cpc	r25, r19
 bb8:	69 f4       	brne	.+26     	; 0xbd4 <free+0x94>
 bba:	ec 01       	movw	r28, r24
 bbc:	28 81       	ld	r18, Y
 bbe:	39 81       	ldd	r19, Y+1	; 0x01
 bc0:	26 0f       	add	r18, r22
 bc2:	37 1f       	adc	r19, r23
 bc4:	2e 5f       	subi	r18, 0xFE	; 254
 bc6:	3f 4f       	sbci	r19, 0xFF	; 255
 bc8:	31 83       	std	Z+1, r19	; 0x01
 bca:	20 83       	st	Z, r18
 bcc:	8a 81       	ldd	r24, Y+2	; 0x02
 bce:	9b 81       	ldd	r25, Y+3	; 0x03
 bd0:	93 83       	std	Z+3, r25	; 0x03
 bd2:	82 83       	std	Z+2, r24	; 0x02
 bd4:	45 2b       	or	r20, r21
 bd6:	29 f4       	brne	.+10     	; 0xbe2 <free+0xa2>
 bd8:	f0 93 4d 01 	sts	0x014D, r31
 bdc:	e0 93 4c 01 	sts	0x014C, r30
 be0:	42 c0       	rjmp	.+132    	; 0xc66 <free+0x126>
 be2:	13 96       	adiw	r26, 0x03	; 3
 be4:	fc 93       	st	X, r31
 be6:	ee 93       	st	-X, r30
 be8:	12 97       	sbiw	r26, 0x02	; 2
 bea:	ed 01       	movw	r28, r26
 bec:	49 91       	ld	r20, Y+
 bee:	59 91       	ld	r21, Y+
 bf0:	9e 01       	movw	r18, r28
 bf2:	24 0f       	add	r18, r20
 bf4:	35 1f       	adc	r19, r21
 bf6:	e2 17       	cp	r30, r18
 bf8:	f3 07       	cpc	r31, r19
 bfa:	71 f4       	brne	.+28     	; 0xc18 <free+0xd8>
 bfc:	80 81       	ld	r24, Z
 bfe:	91 81       	ldd	r25, Z+1	; 0x01
 c00:	84 0f       	add	r24, r20
 c02:	95 1f       	adc	r25, r21
 c04:	02 96       	adiw	r24, 0x02	; 2
 c06:	11 96       	adiw	r26, 0x01	; 1
 c08:	9c 93       	st	X, r25
 c0a:	8e 93       	st	-X, r24
 c0c:	82 81       	ldd	r24, Z+2	; 0x02
 c0e:	93 81       	ldd	r25, Z+3	; 0x03
 c10:	13 96       	adiw	r26, 0x03	; 3
 c12:	9c 93       	st	X, r25
 c14:	8e 93       	st	-X, r24
 c16:	12 97       	sbiw	r26, 0x02	; 2
 c18:	e0 e0       	ldi	r30, 0x00	; 0
 c1a:	f0 e0       	ldi	r31, 0x00	; 0
 c1c:	d8 01       	movw	r26, r16
 c1e:	12 96       	adiw	r26, 0x02	; 2
 c20:	8d 91       	ld	r24, X+
 c22:	9c 91       	ld	r25, X
 c24:	13 97       	sbiw	r26, 0x03	; 3
 c26:	00 97       	sbiw	r24, 0x00	; 0
 c28:	19 f0       	breq	.+6      	; 0xc30 <free+0xf0>
 c2a:	f8 01       	movw	r30, r16
 c2c:	8c 01       	movw	r16, r24
 c2e:	f6 cf       	rjmp	.-20     	; 0xc1c <free+0xdc>
 c30:	8d 91       	ld	r24, X+
 c32:	9c 91       	ld	r25, X
 c34:	98 01       	movw	r18, r16
 c36:	2e 5f       	subi	r18, 0xFE	; 254
 c38:	3f 4f       	sbci	r19, 0xFF	; 255
 c3a:	82 0f       	add	r24, r18
 c3c:	93 1f       	adc	r25, r19
 c3e:	20 91 4a 01 	lds	r18, 0x014A
 c42:	30 91 4b 01 	lds	r19, 0x014B
 c46:	28 17       	cp	r18, r24
 c48:	39 07       	cpc	r19, r25
 c4a:	69 f4       	brne	.+26     	; 0xc66 <free+0x126>
 c4c:	30 97       	sbiw	r30, 0x00	; 0
 c4e:	29 f4       	brne	.+10     	; 0xc5a <free+0x11a>
 c50:	10 92 4d 01 	sts	0x014D, r1
 c54:	10 92 4c 01 	sts	0x014C, r1
 c58:	02 c0       	rjmp	.+4      	; 0xc5e <free+0x11e>
 c5a:	13 82       	std	Z+3, r1	; 0x03
 c5c:	12 82       	std	Z+2, r1	; 0x02
 c5e:	10 93 4b 01 	sts	0x014B, r17
 c62:	00 93 4a 01 	sts	0x014A, r16
 c66:	df 91       	pop	r29
 c68:	cf 91       	pop	r28
 c6a:	1f 91       	pop	r17
 c6c:	0f 91       	pop	r16
 c6e:	08 95       	ret

00000c70 <_exit>:
 c70:	f8 94       	cli

00000c72 <__stop_program>:
 c72:	ff cf       	rjmp	.-2      	; 0xc72 <__stop_program>
