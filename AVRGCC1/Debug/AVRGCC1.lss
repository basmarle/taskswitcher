
AVRGCC1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000008  00800100  0000090e  000009a2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000090e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000032  00800108  00800108  000009aa  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000009aa  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000009dc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000058  00000000  00000000  00000a1c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000327  00000000  00000000  00000a74  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000017f  00000000  00000000  00000d9b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000001a9  00000000  00000000  00000f1a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000110  00000000  00000000  000010c4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000024e  00000000  00000000  000011d4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000001f8  00000000  00000000  00001422  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000048  00000000  00000000  0000161a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 11 02 	jmp	0x422	; 0x422 <__vector_11>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ee e0       	ldi	r30, 0x0E	; 14
  7c:	f9 e0       	ldi	r31, 0x09	; 9
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a8 30       	cpi	r26, 0x08	; 8
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a8 e0       	ldi	r26, 0x08	; 8
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	aa 33       	cpi	r26, 0x3A	; 58
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 96 01 	call	0x32c	; 0x32c <main>
  9e:	0c 94 85 04 	jmp	0x90a	; 0x90a <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <task1>:
	//Store stackpointer in TCB
	asm volatile("in    r0, __SP_L__");
	asm volatile("MOV %[lowAdress], r0 ": [lowAdress] "=r" (task_table[current_task].spl) : );
	asm volatile("in    r0, __SP_H__");
	asm volatile("MOV %[highAdress], r0 ": [highAdress] "=r" (task_table[current_task].sph) : );
}
  a6:	cf 93       	push	r28
  a8:	df 93       	push	r29
  aa:	00 d0       	rcall	.+0      	; 0xac <task1+0x6>
  ac:	00 d0       	rcall	.+0      	; 0xae <task1+0x8>

//Declare the ISR as a naked function
ISR (TIMER1_COMPA_vect) __attribute__ ((naked));

//Task1
void * task1(){
  ae:	cd b7       	in	r28, 0x3d	; 61
  b0:	de b7       	in	r29, 0x3e	; 62
	long a = 0;
  b2:	19 82       	std	Y+1, r1	; 0x01
  b4:	1a 82       	std	Y+2, r1	; 0x02
  b6:	1b 82       	std	Y+3, r1	; 0x03
  b8:	1c 82       	std	Y+4, r1	; 0x04
	while(1){
		a++;
  ba:	89 81       	ldd	r24, Y+1	; 0x01
  bc:	9a 81       	ldd	r25, Y+2	; 0x02
  be:	ab 81       	ldd	r26, Y+3	; 0x03
  c0:	bc 81       	ldd	r27, Y+4	; 0x04
  c2:	01 96       	adiw	r24, 0x01	; 1
  c4:	a1 1d       	adc	r26, r1
  c6:	b1 1d       	adc	r27, r1
  c8:	89 83       	std	Y+1, r24	; 0x01
  ca:	9a 83       	std	Y+2, r25	; 0x02
  cc:	ab 83       	std	Y+3, r26	; 0x03
  ce:	bc 83       	std	Y+4, r27	; 0x04
		//if(a == 5000){
			PORTB = (0 << PINB5);
  d0:	85 e2       	ldi	r24, 0x25	; 37
  d2:	90 e0       	ldi	r25, 0x00	; 0
  d4:	fc 01       	movw	r30, r24
  d6:	10 82       	st	Z, r1
			a = 0;
  d8:	19 82       	std	Y+1, r1	; 0x01
  da:	1a 82       	std	Y+2, r1	; 0x02
  dc:	1b 82       	std	Y+3, r1	; 0x03
  de:	1c 82       	std	Y+4, r1	; 0x04
		//}
		
	}
  e0:	ec cf       	rjmp	.-40     	; 0xba <task1+0x14>

000000e2 <task2>:
}

//Task2
void * task2(){
  e2:	cf 93       	push	r28
  e4:	df 93       	push	r29
  e6:	00 d0       	rcall	.+0      	; 0xe8 <task2+0x6>
  e8:	00 d0       	rcall	.+0      	; 0xea <task2+0x8>
  ea:	cd b7       	in	r28, 0x3d	; 61
  ec:	de b7       	in	r29, 0x3e	; 62
	long b = 0;
  ee:	19 82       	std	Y+1, r1	; 0x01
  f0:	1a 82       	std	Y+2, r1	; 0x02
  f2:	1b 82       	std	Y+3, r1	; 0x03
  f4:	1c 82       	std	Y+4, r1	; 0x04
	while(1){
		b++;
  f6:	89 81       	ldd	r24, Y+1	; 0x01
  f8:	9a 81       	ldd	r25, Y+2	; 0x02
  fa:	ab 81       	ldd	r26, Y+3	; 0x03
  fc:	bc 81       	ldd	r27, Y+4	; 0x04
  fe:	01 96       	adiw	r24, 0x01	; 1
 100:	a1 1d       	adc	r26, r1
 102:	b1 1d       	adc	r27, r1
 104:	89 83       	std	Y+1, r24	; 0x01
 106:	9a 83       	std	Y+2, r25	; 0x02
 108:	ab 83       	std	Y+3, r26	; 0x03
 10a:	bc 83       	std	Y+4, r27	; 0x04
		//if(b == 5000){
			PORTB = (1 << PINB5);
 10c:	85 e2       	ldi	r24, 0x25	; 37
 10e:	90 e0       	ldi	r25, 0x00	; 0
 110:	20 e2       	ldi	r18, 0x20	; 32
 112:	fc 01       	movw	r30, r24
 114:	20 83       	st	Z, r18
			b = 0;
 116:	19 82       	std	Y+1, r1	; 0x01
 118:	1a 82       	std	Y+2, r1	; 0x02
 11a:	1b 82       	std	Y+3, r1	; 0x03
 11c:	1c 82       	std	Y+4, r1	; 0x04
		//}
	}
 11e:	eb cf       	rjmp	.-42     	; 0xf6 <task2+0x14>

00000120 <task3>:
}

//Task3
void * task3(){
 120:	cf 93       	push	r28
 122:	df 93       	push	r29
 124:	00 d0       	rcall	.+0      	; 0x126 <task3+0x6>
 126:	cd b7       	in	r28, 0x3d	; 61
 128:	de b7       	in	r29, 0x3e	; 62
	/*int tempTeller = 0;
	for(int i = 0; i < 50; i++){
		tempTeller++;
	}*/
	
	int telding = TIMER1_COMPA_vect;
 12a:	81 e1       	ldi	r24, 0x11	; 17
 12c:	92 e0       	ldi	r25, 0x02	; 2
 12e:	9a 83       	std	Y+2, r25	; 0x02
 130:	89 83       	std	Y+1, r24	; 0x01

	current_node->task->markedforremoval = 1;
 132:	80 91 10 01 	lds	r24, 0x0110
 136:	90 91 11 01 	lds	r25, 0x0111
 13a:	fc 01       	movw	r30, r24
 13c:	80 81       	ld	r24, Z
 13e:	91 81       	ldd	r25, Z+1	; 0x01
 140:	21 e0       	ldi	r18, 0x01	; 1
 142:	30 e0       	ldi	r19, 0x00	; 0
 144:	fc 01       	movw	r30, r24
 146:	31 8b       	std	Z+17, r19	; 0x11
 148:	20 8b       	std	Z+16, r18	; 0x10
	//End of task
	asm("ijmp" :: "z" (TIMER1_COMPA_vect));
 14a:	81 e1       	ldi	r24, 0x11	; 17
 14c:	92 e0       	ldi	r25, 0x02	; 2
 14e:	fc 01       	movw	r30, r24
 150:	09 94       	ijmp
	telding = 86;
 152:	86 e5       	ldi	r24, 0x56	; 86
 154:	90 e0       	ldi	r25, 0x00	; 0
 156:	9a 83       	std	Y+2, r25	; 0x02
 158:	89 83       	std	Y+1, r24	; 0x01
	/*asm("MOV R18, %[highAddress]" :: [highAddress] "r" (((int)TIMER1_COMPA_vect & 0xFF00) >> 8));
	asm("PUSH R18");
	asm("MOV R18, %[lowAddress]" :: [lowAddress] "r" (((int)TIMER1_COMPA_vect & 0x00FF)));
	asm("PUSH R18");
	asm("RET");*/
}
 15a:	0f 90       	pop	r0
 15c:	0f 90       	pop	r0
 15e:	df 91       	pop	r29
 160:	cf 91       	pop	r28
 162:	08 95       	ret

00000164 <initTask>:

void initTask(void * taskAddress){
 164:	0f 93       	push	r16
 166:	1f 93       	push	r17
 168:	cf 93       	push	r28
 16a:	df 93       	push	r29
 16c:	00 d0       	rcall	.+0      	; 0x16e <initTask+0xa>
 16e:	cd b7       	in	r28, 0x3d	; 61
 170:	de b7       	in	r29, 0x3e	; 62
 172:	9a 83       	std	Y+2, r25	; 0x02
 174:	89 83       	std	Y+1, r24	; 0x01
	static int taskCount = 0;
	
	//Only use the root for the firsttask
	if(taskCount == 0){
 176:	80 91 0a 01 	lds	r24, 0x010A
 17a:	90 91 0b 01 	lds	r25, 0x010B
 17e:	89 2b       	or	r24, r25
 180:	99 f4       	brne	.+38     	; 0x1a8 <initTask+0x44>
		root->task = malloc(sizeof(task_table_t));
 182:	00 91 0e 01 	lds	r16, 0x010E
 186:	10 91 0f 01 	lds	r17, 0x010F
 18a:	82 e1       	ldi	r24, 0x12	; 18
 18c:	90 e0       	ldi	r25, 0x00	; 0
 18e:	0e 94 58 03 	call	0x6b0	; 0x6b0 <malloc>
 192:	f8 01       	movw	r30, r16
 194:	91 83       	std	Z+1, r25	; 0x01
 196:	80 83       	st	Z, r24
		root->next = 0;
 198:	80 91 0e 01 	lds	r24, 0x010E
 19c:	90 91 0f 01 	lds	r25, 0x010F
 1a0:	fc 01       	movw	r30, r24
 1a2:	13 82       	std	Z+3, r1	; 0x03
 1a4:	12 82       	std	Z+2, r1	; 0x02
 1a6:	28 c0       	rjmp	.+80     	; 0x1f8 <initTask+0x94>
	} else {
		current_node->next = malloc(sizeof(task_table_t));
 1a8:	00 91 10 01 	lds	r16, 0x0110
 1ac:	10 91 11 01 	lds	r17, 0x0111
 1b0:	82 e1       	ldi	r24, 0x12	; 18
 1b2:	90 e0       	ldi	r25, 0x00	; 0
 1b4:	0e 94 58 03 	call	0x6b0	; 0x6b0 <malloc>
 1b8:	f8 01       	movw	r30, r16
 1ba:	93 83       	std	Z+3, r25	; 0x03
 1bc:	82 83       	std	Z+2, r24	; 0x02
		current_node = current_node->next;
 1be:	80 91 10 01 	lds	r24, 0x0110
 1c2:	90 91 11 01 	lds	r25, 0x0111
 1c6:	fc 01       	movw	r30, r24
 1c8:	82 81       	ldd	r24, Z+2	; 0x02
 1ca:	93 81       	ldd	r25, Z+3	; 0x03
 1cc:	90 93 11 01 	sts	0x0111, r25
 1d0:	80 93 10 01 	sts	0x0110, r24
		current_node->task = malloc(sizeof(task_table_t));
 1d4:	00 91 10 01 	lds	r16, 0x0110
 1d8:	10 91 11 01 	lds	r17, 0x0111
 1dc:	82 e1       	ldi	r24, 0x12	; 18
 1de:	90 e0       	ldi	r25, 0x00	; 0
 1e0:	0e 94 58 03 	call	0x6b0	; 0x6b0 <malloc>
 1e4:	f8 01       	movw	r30, r16
 1e6:	91 83       	std	Z+1, r25	; 0x01
 1e8:	80 83       	st	Z, r24
		current_node->next = 0;
 1ea:	80 91 10 01 	lds	r24, 0x0110
 1ee:	90 91 11 01 	lds	r25, 0x0111
 1f2:	fc 01       	movw	r30, r24
 1f4:	13 82       	std	Z+3, r1	; 0x03
 1f6:	12 82       	std	Z+2, r1	; 0x02
	}
	
	//root->task->
	//Set ID of task
	current_node->task->id = taskCount;
 1f8:	80 91 10 01 	lds	r24, 0x0110
 1fc:	90 91 11 01 	lds	r25, 0x0111
 200:	fc 01       	movw	r30, r24
 202:	80 81       	ld	r24, Z
 204:	91 81       	ldd	r25, Z+1	; 0x01
 206:	20 91 0a 01 	lds	r18, 0x010A
 20a:	30 91 0b 01 	lds	r19, 0x010B
 20e:	fc 01       	movw	r30, r24
 210:	31 83       	std	Z+1, r19	; 0x01
 212:	20 83       	st	Z, r18
	//Start address of the task
	current_node->task->address = taskAddress;
 214:	80 91 10 01 	lds	r24, 0x0110
 218:	90 91 11 01 	lds	r25, 0x0111
 21c:	fc 01       	movw	r30, r24
 21e:	80 81       	ld	r24, Z
 220:	91 81       	ldd	r25, Z+1	; 0x01
 222:	29 81       	ldd	r18, Y+1	; 0x01
 224:	3a 81       	ldd	r19, Y+2	; 0x02
 226:	fc 01       	movw	r30, r24
 228:	35 87       	std	Z+13, r19	; 0x0d
 22a:	24 87       	std	Z+12, r18	; 0x0c
	//Split into 2 bytes
	current_node->task->pcl = ((int)current_node->task->address & 0x00FF);
 22c:	80 91 10 01 	lds	r24, 0x0110
 230:	90 91 11 01 	lds	r25, 0x0111
 234:	fc 01       	movw	r30, r24
 236:	80 81       	ld	r24, Z
 238:	91 81       	ldd	r25, Z+1	; 0x01
 23a:	20 91 10 01 	lds	r18, 0x0110
 23e:	30 91 11 01 	lds	r19, 0x0111
 242:	f9 01       	movw	r30, r18
 244:	20 81       	ld	r18, Z
 246:	31 81       	ldd	r19, Z+1	; 0x01
 248:	f9 01       	movw	r30, r18
 24a:	24 85       	ldd	r18, Z+12	; 0x0c
 24c:	35 85       	ldd	r19, Z+13	; 0x0d
 24e:	33 27       	eor	r19, r19
 250:	fc 01       	movw	r30, r24
 252:	31 87       	std	Z+9, r19	; 0x09
 254:	20 87       	std	Z+8, r18	; 0x08
	current_node->task->pch = ((int)current_node->task->address & 0xFF00) >> 8;
 256:	80 91 10 01 	lds	r24, 0x0110
 25a:	90 91 11 01 	lds	r25, 0x0111
 25e:	fc 01       	movw	r30, r24
 260:	80 81       	ld	r24, Z
 262:	91 81       	ldd	r25, Z+1	; 0x01
 264:	20 91 10 01 	lds	r18, 0x0110
 268:	30 91 11 01 	lds	r19, 0x0111
 26c:	f9 01       	movw	r30, r18
 26e:	20 81       	ld	r18, Z
 270:	31 81       	ldd	r19, Z+1	; 0x01
 272:	f9 01       	movw	r30, r18
 274:	24 85       	ldd	r18, Z+12	; 0x0c
 276:	35 85       	ldd	r19, Z+13	; 0x0d
 278:	23 2f       	mov	r18, r19
 27a:	33 27       	eor	r19, r19
 27c:	fc 01       	movw	r30, r24
 27e:	33 87       	std	Z+11, r19	; 0x0b
 280:	22 87       	std	Z+10, r18	; 0x0a
	//Set taskpointer
	current_node->task->spl = (0x7D0 - (taskCount * 0x64)) & 0x00FF;
 282:	80 91 10 01 	lds	r24, 0x0110
 286:	90 91 11 01 	lds	r25, 0x0111
 28a:	fc 01       	movw	r30, r24
 28c:	80 81       	ld	r24, Z
 28e:	91 81       	ldd	r25, Z+1	; 0x01
 290:	40 91 0a 01 	lds	r20, 0x010A
 294:	50 91 0b 01 	lds	r21, 0x010B
 298:	6c e9       	ldi	r22, 0x9C	; 156
 29a:	64 03       	mulsu	r22, r20
 29c:	90 01       	movw	r18, r0
 29e:	65 9f       	mul	r22, r21
 2a0:	30 0d       	add	r19, r0
 2a2:	11 24       	eor	r1, r1
 2a4:	20 53       	subi	r18, 0x30	; 48
 2a6:	38 4f       	sbci	r19, 0xF8	; 248
 2a8:	33 27       	eor	r19, r19
 2aa:	fc 01       	movw	r30, r24
 2ac:	35 83       	std	Z+5, r19	; 0x05
 2ae:	24 83       	std	Z+4, r18	; 0x04
	current_node->task->sph = ((0x7D0 - (taskCount * 0x64)) & 0xFF00) >> 8;
 2b0:	80 91 10 01 	lds	r24, 0x0110
 2b4:	90 91 11 01 	lds	r25, 0x0111
 2b8:	fc 01       	movw	r30, r24
 2ba:	80 81       	ld	r24, Z
 2bc:	91 81       	ldd	r25, Z+1	; 0x01
 2be:	40 91 0a 01 	lds	r20, 0x010A
 2c2:	50 91 0b 01 	lds	r21, 0x010B
 2c6:	6c e9       	ldi	r22, 0x9C	; 156
 2c8:	64 03       	mulsu	r22, r20
 2ca:	90 01       	movw	r18, r0
 2cc:	65 9f       	mul	r22, r21
 2ce:	30 0d       	add	r19, r0
 2d0:	11 24       	eor	r1, r1
 2d2:	20 53       	subi	r18, 0x30	; 48
 2d4:	38 4f       	sbci	r19, 0xF8	; 248
 2d6:	23 2f       	mov	r18, r19
 2d8:	33 27       	eor	r19, r19
 2da:	fc 01       	movw	r30, r24
 2dc:	33 83       	std	Z+3, r19	; 0x03
 2de:	22 83       	std	Z+2, r18	; 0x02
	current_node->task->firsttime = 1;
 2e0:	80 91 10 01 	lds	r24, 0x0110
 2e4:	90 91 11 01 	lds	r25, 0x0111
 2e8:	fc 01       	movw	r30, r24
 2ea:	80 81       	ld	r24, Z
 2ec:	91 81       	ldd	r25, Z+1	; 0x01
 2ee:	21 e0       	ldi	r18, 0x01	; 1
 2f0:	30 e0       	ldi	r19, 0x00	; 0
 2f2:	fc 01       	movw	r30, r24
 2f4:	37 87       	std	Z+15, r19	; 0x0f
 2f6:	26 87       	std	Z+14, r18	; 0x0e
	current_node->task->markedforremoval = 0;
 2f8:	80 91 10 01 	lds	r24, 0x0110
 2fc:	90 91 11 01 	lds	r25, 0x0111
 300:	fc 01       	movw	r30, r24
 302:	80 81       	ld	r24, Z
 304:	91 81       	ldd	r25, Z+1	; 0x01
 306:	fc 01       	movw	r30, r24
 308:	11 8a       	std	Z+17, r1	; 0x11
 30a:	10 8a       	std	Z+16, r1	; 0x10
	
	taskCount++;
 30c:	80 91 0a 01 	lds	r24, 0x010A
 310:	90 91 0b 01 	lds	r25, 0x010B
 314:	01 96       	adiw	r24, 0x01	; 1
 316:	90 93 0b 01 	sts	0x010B, r25
 31a:	80 93 0a 01 	sts	0x010A, r24
}
 31e:	0f 90       	pop	r0
 320:	0f 90       	pop	r0
 322:	df 91       	pop	r29
 324:	cf 91       	pop	r28
 326:	1f 91       	pop	r17
 328:	0f 91       	pop	r16
 32a:	08 95       	ret

0000032c <main>:

int main(void)
{
 32c:	cf 93       	push	r28
 32e:	df 93       	push	r29
 330:	cd b7       	in	r28, 0x3d	; 61
 332:	de b7       	in	r29, 0x3e	; 62
	cli();//stop interrupts
 334:	f8 94       	cli
	
	//All pins in PORTD are outputs
	DDRB = 0b11111111;    
 336:	84 e2       	ldi	r24, 0x24	; 36
 338:	90 e0       	ldi	r25, 0x00	; 0
 33a:	2f ef       	ldi	r18, 0xFF	; 255
 33c:	fc 01       	movw	r30, r24
 33e:	20 83       	st	Z, r18
	//Set the tik count for each task
	kernel_settings.taskClockCount = 100;
 340:	84 e6       	ldi	r24, 0x64	; 100
 342:	90 e0       	ldi	r25, 0x00	; 0
 344:	90 93 0d 01 	sts	0x010D, r25
 348:	80 93 0c 01 	sts	0x010C, r24

	TCCR1A = 0;// set entire TCCR1A register to 0
 34c:	80 e8       	ldi	r24, 0x80	; 128
 34e:	90 e0       	ldi	r25, 0x00	; 0
 350:	fc 01       	movw	r30, r24
 352:	10 82       	st	Z, r1
	TCCR1B = 0;// same for TCCR1B
 354:	81 e8       	ldi	r24, 0x81	; 129
 356:	90 e0       	ldi	r25, 0x00	; 0
 358:	fc 01       	movw	r30, r24
 35a:	10 82       	st	Z, r1
	TCNT1  = 0;//initialize counter value to 0
 35c:	84 e8       	ldi	r24, 0x84	; 132
 35e:	90 e0       	ldi	r25, 0x00	; 0
 360:	fc 01       	movw	r30, r24
 362:	11 82       	std	Z+1, r1	; 0x01
 364:	10 82       	st	Z, r1
	OCR1A = kernel_settings.taskClockCount;
 366:	88 e8       	ldi	r24, 0x88	; 136
 368:	90 e0       	ldi	r25, 0x00	; 0
 36a:	20 91 0c 01 	lds	r18, 0x010C
 36e:	30 91 0d 01 	lds	r19, 0x010D
 372:	fc 01       	movw	r30, r24
 374:	31 83       	std	Z+1, r19	; 0x01
 376:	20 83       	st	Z, r18
	// turn on CTC mode
	TCCR1B |= (1 << WGM12);
 378:	81 e8       	ldi	r24, 0x81	; 129
 37a:	90 e0       	ldi	r25, 0x00	; 0
 37c:	21 e8       	ldi	r18, 0x81	; 129
 37e:	30 e0       	ldi	r19, 0x00	; 0
 380:	f9 01       	movw	r30, r18
 382:	20 81       	ld	r18, Z
 384:	28 60       	ori	r18, 0x08	; 8
 386:	fc 01       	movw	r30, r24
 388:	20 83       	st	Z, r18
	// Set bit for prescaler
	TCCR1B |= (1 << CS10);
 38a:	81 e8       	ldi	r24, 0x81	; 129
 38c:	90 e0       	ldi	r25, 0x00	; 0
 38e:	21 e8       	ldi	r18, 0x81	; 129
 390:	30 e0       	ldi	r19, 0x00	; 0
 392:	f9 01       	movw	r30, r18
 394:	20 81       	ld	r18, Z
 396:	21 60       	ori	r18, 0x01	; 1
 398:	fc 01       	movw	r30, r24
 39a:	20 83       	st	Z, r18
	// enable timer compare interrupt
	TIMSK1 |= (1 << OCIE1A);
 39c:	8f e6       	ldi	r24, 0x6F	; 111
 39e:	90 e0       	ldi	r25, 0x00	; 0
 3a0:	2f e6       	ldi	r18, 0x6F	; 111
 3a2:	30 e0       	ldi	r19, 0x00	; 0
 3a4:	f9 01       	movw	r30, r18
 3a6:	20 81       	ld	r18, Z
 3a8:	22 60       	ori	r18, 0x02	; 2
 3aa:	fc 01       	movw	r30, r24
 3ac:	20 83       	st	Z, r18
	
	
	root = malloc(sizeof(struct node));
 3ae:	84 e0       	ldi	r24, 0x04	; 4
 3b0:	90 e0       	ldi	r25, 0x00	; 0
 3b2:	0e 94 58 03 	call	0x6b0	; 0x6b0 <malloc>
 3b6:	90 93 0f 01 	sts	0x010F, r25
 3ba:	80 93 0e 01 	sts	0x010E, r24
	current_node  = root;
 3be:	80 91 0e 01 	lds	r24, 0x010E
 3c2:	90 91 0f 01 	lds	r25, 0x010F
 3c6:	90 93 11 01 	sts	0x0111, r25
 3ca:	80 93 10 01 	sts	0x0110, r24
	initTask(task1);
 3ce:	83 e5       	ldi	r24, 0x53	; 83
 3d0:	90 e0       	ldi	r25, 0x00	; 0
 3d2:	0e 94 b2 00 	call	0x164	; 0x164 <initTask>
	initTask(task2);
 3d6:	81 e7       	ldi	r24, 0x71	; 113
 3d8:	90 e0       	ldi	r25, 0x00	; 0
 3da:	0e 94 b2 00 	call	0x164	; 0x164 <initTask>
	initTask(task3);
 3de:	80 e9       	ldi	r24, 0x90	; 144
 3e0:	90 e0       	ldi	r25, 0x00	; 0
 3e2:	0e 94 b2 00 	call	0x164	; 0x164 <initTask>
	current_node->next = root;
 3e6:	80 91 10 01 	lds	r24, 0x0110
 3ea:	90 91 11 01 	lds	r25, 0x0111
 3ee:	20 91 0e 01 	lds	r18, 0x010E
 3f2:	30 91 0f 01 	lds	r19, 0x010F
 3f6:	fc 01       	movw	r30, r24
 3f8:	33 83       	std	Z+3, r19	; 0x03
 3fa:	22 83       	std	Z+2, r18	; 0x02
	current_node  = root;
 3fc:	80 91 0e 01 	lds	r24, 0x010E
 400:	90 91 0f 01 	lds	r25, 0x010F
 404:	90 93 11 01 	sts	0x0111, r25
 408:	80 93 10 01 	sts	0x0110, r24
	sei();//allow interrupts
 40c:	78 94       	sei
	
	while (1)
	{
		// we have a working Timer
		counter++;
 40e:	80 91 08 01 	lds	r24, 0x0108
 412:	90 91 09 01 	lds	r25, 0x0109
 416:	01 96       	adiw	r24, 0x01	; 1
 418:	90 93 09 01 	sts	0x0109, r25
 41c:	80 93 08 01 	sts	0x0108, r24
	}
 420:	f6 cf       	rjmp	.-20     	; 0x40e <main+0xe2>

00000422 <__vector_11>:


ISR (TIMER1_COMPA_vect)
{
	//Disable interrupts
	cli();
 422:	f8 94       	cli
	
	//Do not switch context on first run
	if(firstrun){
 424:	80 91 06 01 	lds	r24, 0x0106
 428:	90 91 07 01 	lds	r25, 0x0107
 42c:	89 2b       	or	r24, r25
 42e:	09 f4       	brne	.+2      	; 0x432 <__vector_11+0x10>
 430:	3f c0       	rjmp	.+126    	; 0x4b0 <__vector_11+0x8e>
		//Only run once
		firstrun = 0;
 432:	10 92 07 01 	sts	0x0107, r1
 436:	10 92 06 01 	sts	0x0106, r1
		//Set stack pointer
		asm volatile("MOV r0, %[lowAddress] " :: [lowAddress] "r" (current_node->task->spl));
 43a:	80 91 10 01 	lds	r24, 0x0110
 43e:	90 91 11 01 	lds	r25, 0x0111
 442:	fc 01       	movw	r30, r24
 444:	80 81       	ld	r24, Z
 446:	91 81       	ldd	r25, Z+1	; 0x01
 448:	fc 01       	movw	r30, r24
 44a:	84 81       	ldd	r24, Z+4	; 0x04
 44c:	95 81       	ldd	r25, Z+5	; 0x05
 44e:	08 2e       	mov	r0, r24
		asm volatile("OUT __SP_L__, r0");
 450:	0d be       	out	0x3d, r0	; 61
		asm volatile("MOV r0, %[highAddress] " :: [highAddress] "r" (current_node->task->sph));
 452:	80 91 10 01 	lds	r24, 0x0110
 456:	90 91 11 01 	lds	r25, 0x0111
 45a:	fc 01       	movw	r30, r24
 45c:	80 81       	ld	r24, Z
 45e:	91 81       	ldd	r25, Z+1	; 0x01
 460:	fc 01       	movw	r30, r24
 462:	82 81       	ldd	r24, Z+2	; 0x02
 464:	93 81       	ldd	r25, Z+3	; 0x03
 466:	08 2e       	mov	r0, r24
		asm volatile("OUT __SP_H__, r0");
 468:	0e be       	out	0x3e, r0	; 62
		
		asm("MOV R18, %[lowAdress]" :: [lowAdress] "r" (current_node->task->pcl));
 46a:	80 91 10 01 	lds	r24, 0x0110
 46e:	90 91 11 01 	lds	r25, 0x0111
 472:	fc 01       	movw	r30, r24
 474:	80 81       	ld	r24, Z
 476:	91 81       	ldd	r25, Z+1	; 0x01
 478:	fc 01       	movw	r30, r24
 47a:	80 85       	ldd	r24, Z+8	; 0x08
 47c:	91 85       	ldd	r25, Z+9	; 0x09
 47e:	28 2f       	mov	r18, r24
		asm("PUSH R18");
 480:	2f 93       	push	r18
		asm("MOV R18, %[highAdress]" :: [highAdress] "r" (current_node->task->pch));
 482:	80 91 10 01 	lds	r24, 0x0110
 486:	90 91 11 01 	lds	r25, 0x0111
 48a:	fc 01       	movw	r30, r24
 48c:	80 81       	ld	r24, Z
 48e:	91 81       	ldd	r25, Z+1	; 0x01
 490:	fc 01       	movw	r30, r24
 492:	82 85       	ldd	r24, Z+10	; 0x0a
 494:	93 85       	ldd	r25, Z+11	; 0x0b
 496:	28 2f       	mov	r18, r24
		asm("PUSH 18");
 498:	2f 93       	push	r18
		current_node->task->firsttime = 0;
 49a:	80 91 10 01 	lds	r24, 0x0110
 49e:	90 91 11 01 	lds	r25, 0x0111
 4a2:	fc 01       	movw	r30, r24
 4a4:	80 81       	ld	r24, Z
 4a6:	91 81       	ldd	r25, Z+1	; 0x01
 4a8:	fc 01       	movw	r30, r24
 4aa:	17 86       	std	Z+15, r1	; 0x0f
 4ac:	16 86       	std	Z+14, r1	; 0x0e
 4ae:	f4 c0       	rjmp	.+488    	; 0x698 <__vector_11+0x276>
		
	} else {
		//Save context only if task is not marked for removal
		if(!current_node->task->markedforremoval) {
 4b0:	80 91 10 01 	lds	r24, 0x0110
 4b4:	90 91 11 01 	lds	r25, 0x0111
 4b8:	fc 01       	movw	r30, r24
 4ba:	80 81       	ld	r24, Z
 4bc:	91 81       	ldd	r25, Z+1	; 0x01
 4be:	fc 01       	movw	r30, r24
 4c0:	80 89       	ldd	r24, Z+16	; 0x10
 4c2:	91 89       	ldd	r25, Z+17	; 0x11
 4c4:	89 2b       	or	r24, r25
 4c6:	09 f0       	breq	.+2      	; 0x4ca <__vector_11+0xa8>
 4c8:	3c c0       	rjmp	.+120    	; 0x542 <__vector_11+0x120>
			//Save context
			asm volatile (
 4ca:	0f 92       	push	r0
 4cc:	0f b6       	in	r0, 0x3f	; 63
 4ce:	f8 94       	cli
 4d0:	0f 92       	push	r0
 4d2:	1f 92       	push	r1
 4d4:	11 24       	eor	r1, r1
 4d6:	2f 92       	push	r2
 4d8:	3f 92       	push	r3
 4da:	4f 92       	push	r4
 4dc:	5f 92       	push	r5
 4de:	6f 92       	push	r6
 4e0:	7f 92       	push	r7
 4e2:	8f 92       	push	r8
 4e4:	9f 92       	push	r9
 4e6:	af 92       	push	r10
 4e8:	bf 92       	push	r11
 4ea:	cf 92       	push	r12
 4ec:	df 92       	push	r13
 4ee:	ef 92       	push	r14
 4f0:	ff 92       	push	r15
 4f2:	0f 93       	push	r16
 4f4:	1f 93       	push	r17
 4f6:	2f 93       	push	r18
 4f8:	3f 93       	push	r19
 4fa:	4f 93       	push	r20
 4fc:	5f 93       	push	r21
 4fe:	6f 93       	push	r22
 500:	7f 93       	push	r23
 502:	8f 93       	push	r24
 504:	9f 93       	push	r25
 506:	af 93       	push	r26
 508:	bf 93       	push	r27
 50a:	cf 93       	push	r28
 50c:	df 93       	push	r29
 50e:	ef 93       	push	r30
 510:	ff 93       	push	r31
			"push  r29                   \n\t" \
			"push  r30                   \n\t" \
			"push  r31                   \n\t");
			
			//Store stackpointer in TCB
			asm volatile("in    r0, __SP_L__");
 512:	0d b6       	in	r0, 0x3d	; 61
			asm volatile("MOV %[lowAdress], r0 ": [lowAdress] "=r" (current_node->task->spl) : );
 514:	80 91 10 01 	lds	r24, 0x0110
 518:	90 91 11 01 	lds	r25, 0x0111
 51c:	fc 01       	movw	r30, r24
 51e:	80 81       	ld	r24, Z
 520:	91 81       	ldd	r25, Z+1	; 0x01
 522:	20 2d       	mov	r18, r0
 524:	fc 01       	movw	r30, r24
 526:	35 83       	std	Z+5, r19	; 0x05
 528:	24 83       	std	Z+4, r18	; 0x04
			asm volatile("in    r0, __SP_H__");
 52a:	0e b6       	in	r0, 0x3e	; 62
			asm volatile("MOV %[highAdress], r0 ": [highAdress] "=r" (current_node->task->sph) : );
 52c:	80 91 10 01 	lds	r24, 0x0110
 530:	90 91 11 01 	lds	r25, 0x0111
 534:	fc 01       	movw	r30, r24
 536:	80 81       	ld	r24, Z
 538:	91 81       	ldd	r25, Z+1	; 0x01
 53a:	20 2d       	mov	r18, r0
 53c:	fc 01       	movw	r30, r24
 53e:	33 83       	std	Z+3, r19	; 0x03
 540:	22 83       	std	Z+2, r18	; 0x02
		} else{
			//Remove current_node from linked_list
			//current_node = current_node->next;
		}
		//Select the current task
		if(current_node->next->task->markedforremoval){
 542:	80 91 10 01 	lds	r24, 0x0110
 546:	90 91 11 01 	lds	r25, 0x0111
 54a:	fc 01       	movw	r30, r24
 54c:	82 81       	ldd	r24, Z+2	; 0x02
 54e:	93 81       	ldd	r25, Z+3	; 0x03
 550:	fc 01       	movw	r30, r24
 552:	80 81       	ld	r24, Z
 554:	91 81       	ldd	r25, Z+1	; 0x01
 556:	fc 01       	movw	r30, r24
 558:	80 89       	ldd	r24, Z+16	; 0x10
 55a:	91 89       	ldd	r25, Z+17	; 0x11
 55c:	89 2b       	or	r24, r25
 55e:	79 f0       	breq	.+30     	; 0x57e <__vector_11+0x15c>
			current_node = current_node->next->next;
 560:	80 91 10 01 	lds	r24, 0x0110
 564:	90 91 11 01 	lds	r25, 0x0111
 568:	fc 01       	movw	r30, r24
 56a:	82 81       	ldd	r24, Z+2	; 0x02
 56c:	93 81       	ldd	r25, Z+3	; 0x03
 56e:	fc 01       	movw	r30, r24
 570:	82 81       	ldd	r24, Z+2	; 0x02
 572:	93 81       	ldd	r25, Z+3	; 0x03
 574:	90 93 11 01 	sts	0x0111, r25
 578:	80 93 10 01 	sts	0x0110, r24
 57c:	0b c0       	rjmp	.+22     	; 0x594 <__vector_11+0x172>
		} else {
			current_node = current_node->next;
 57e:	80 91 10 01 	lds	r24, 0x0110
 582:	90 91 11 01 	lds	r25, 0x0111
 586:	fc 01       	movw	r30, r24
 588:	82 81       	ldd	r24, Z+2	; 0x02
 58a:	93 81       	ldd	r25, Z+3	; 0x03
 58c:	90 93 11 01 	sts	0x0111, r25
 590:	80 93 10 01 	sts	0x0110, r24
		}
		
		
		if(current_node->task->firsttime){
 594:	80 91 10 01 	lds	r24, 0x0110
 598:	90 91 11 01 	lds	r25, 0x0111
 59c:	fc 01       	movw	r30, r24
 59e:	80 81       	ld	r24, Z
 5a0:	91 81       	ldd	r25, Z+1	; 0x01
 5a2:	fc 01       	movw	r30, r24
 5a4:	86 85       	ldd	r24, Z+14	; 0x0e
 5a6:	97 85       	ldd	r25, Z+15	; 0x0f
 5a8:	89 2b       	or	r24, r25
 5aa:	09 f4       	brne	.+2      	; 0x5ae <__vector_11+0x18c>
 5ac:	3b c0       	rjmp	.+118    	; 0x624 <__vector_11+0x202>
			asm volatile("MOV r0, %[lowAddress] " :: [lowAddress] "r" (current_node->task->spl));
 5ae:	80 91 10 01 	lds	r24, 0x0110
 5b2:	90 91 11 01 	lds	r25, 0x0111
 5b6:	fc 01       	movw	r30, r24
 5b8:	80 81       	ld	r24, Z
 5ba:	91 81       	ldd	r25, Z+1	; 0x01
 5bc:	fc 01       	movw	r30, r24
 5be:	84 81       	ldd	r24, Z+4	; 0x04
 5c0:	95 81       	ldd	r25, Z+5	; 0x05
 5c2:	08 2e       	mov	r0, r24
			asm volatile("OUT __SP_L__, r0");
 5c4:	0d be       	out	0x3d, r0	; 61
			asm volatile("MOV r0, %[highAddress] " :: [highAddress] "r" (current_node->task->sph));
 5c6:	80 91 10 01 	lds	r24, 0x0110
 5ca:	90 91 11 01 	lds	r25, 0x0111
 5ce:	fc 01       	movw	r30, r24
 5d0:	80 81       	ld	r24, Z
 5d2:	91 81       	ldd	r25, Z+1	; 0x01
 5d4:	fc 01       	movw	r30, r24
 5d6:	82 81       	ldd	r24, Z+2	; 0x02
 5d8:	93 81       	ldd	r25, Z+3	; 0x03
 5da:	08 2e       	mov	r0, r24
			asm volatile("OUT __SP_H__, r0");
 5dc:	0e be       	out	0x3e, r0	; 62
			
			asm("MOV R18, %[lowAdress]" :: [lowAdress] "r" (current_node->task->pcl));
 5de:	80 91 10 01 	lds	r24, 0x0110
 5e2:	90 91 11 01 	lds	r25, 0x0111
 5e6:	fc 01       	movw	r30, r24
 5e8:	80 81       	ld	r24, Z
 5ea:	91 81       	ldd	r25, Z+1	; 0x01
 5ec:	fc 01       	movw	r30, r24
 5ee:	80 85       	ldd	r24, Z+8	; 0x08
 5f0:	91 85       	ldd	r25, Z+9	; 0x09
 5f2:	28 2f       	mov	r18, r24
			asm("PUSH R18");
 5f4:	2f 93       	push	r18
			asm("MOV R18, %[highAdress]" :: [highAdress] "r" (current_node->task->pch));
 5f6:	80 91 10 01 	lds	r24, 0x0110
 5fa:	90 91 11 01 	lds	r25, 0x0111
 5fe:	fc 01       	movw	r30, r24
 600:	80 81       	ld	r24, Z
 602:	91 81       	ldd	r25, Z+1	; 0x01
 604:	fc 01       	movw	r30, r24
 606:	82 85       	ldd	r24, Z+10	; 0x0a
 608:	93 85       	ldd	r25, Z+11	; 0x0b
 60a:	28 2f       	mov	r18, r24
			asm("PUSH 18");
 60c:	2f 93       	push	r18
			current_node->task->firsttime = 0;
 60e:	80 91 10 01 	lds	r24, 0x0110
 612:	90 91 11 01 	lds	r25, 0x0111
 616:	fc 01       	movw	r30, r24
 618:	80 81       	ld	r24, Z
 61a:	91 81       	ldd	r25, Z+1	; 0x01
 61c:	fc 01       	movw	r30, r24
 61e:	17 86       	std	Z+15, r1	; 0x0f
 620:	16 86       	std	Z+14, r1	; 0x0e
 622:	3a c0       	rjmp	.+116    	; 0x698 <__vector_11+0x276>
		} else {
			//Load stack pointers
			asm volatile("MOV r0, %[lowAddress] " :: [lowAddress] "r" (current_node->task->spl));
 624:	80 91 10 01 	lds	r24, 0x0110
 628:	90 91 11 01 	lds	r25, 0x0111
 62c:	fc 01       	movw	r30, r24
 62e:	80 81       	ld	r24, Z
 630:	91 81       	ldd	r25, Z+1	; 0x01
 632:	fc 01       	movw	r30, r24
 634:	84 81       	ldd	r24, Z+4	; 0x04
 636:	95 81       	ldd	r25, Z+5	; 0x05
 638:	08 2e       	mov	r0, r24
			asm volatile("OUT __SP_L__, r0");
 63a:	0d be       	out	0x3d, r0	; 61
			asm volatile("MOV r0, %[highAddress] " :: [highAddress] "r" (current_node->task->sph));
 63c:	80 91 10 01 	lds	r24, 0x0110
 640:	90 91 11 01 	lds	r25, 0x0111
 644:	fc 01       	movw	r30, r24
 646:	80 81       	ld	r24, Z
 648:	91 81       	ldd	r25, Z+1	; 0x01
 64a:	fc 01       	movw	r30, r24
 64c:	82 81       	ldd	r24, Z+2	; 0x02
 64e:	93 81       	ldd	r25, Z+3	; 0x03
 650:	08 2e       	mov	r0, r24
			asm volatile("OUT __SP_H__, r0");
 652:	0e be       	out	0x3e, r0	; 62
						
			//Load context
			asm volatile (
 654:	ff 91       	pop	r31
 656:	ef 91       	pop	r30
 658:	df 91       	pop	r29
 65a:	cf 91       	pop	r28
 65c:	bf 91       	pop	r27
 65e:	af 91       	pop	r26
 660:	9f 91       	pop	r25
 662:	8f 91       	pop	r24
 664:	7f 91       	pop	r23
 666:	6f 91       	pop	r22
 668:	5f 91       	pop	r21
 66a:	4f 91       	pop	r20
 66c:	3f 91       	pop	r19
 66e:	2f 91       	pop	r18
 670:	1f 91       	pop	r17
 672:	0f 91       	pop	r16
 674:	ff 90       	pop	r15
 676:	ef 90       	pop	r14
 678:	df 90       	pop	r13
 67a:	cf 90       	pop	r12
 67c:	bf 90       	pop	r11
 67e:	af 90       	pop	r10
 680:	9f 90       	pop	r9
 682:	8f 90       	pop	r8
 684:	7f 90       	pop	r7
 686:	6f 90       	pop	r6
 688:	5f 90       	pop	r5
 68a:	4f 90       	pop	r4
 68c:	3f 90       	pop	r3
 68e:	2f 90       	pop	r2
 690:	1f 90       	pop	r1
 692:	0f 90       	pop	r0
 694:	0f be       	out	0x3f, r0	; 63
 696:	0f 90       	pop	r0
			);
		}
	}

	//Set clocktimer
	TCNT1  = 0;
 698:	84 e8       	ldi	r24, 0x84	; 132
 69a:	90 e0       	ldi	r25, 0x00	; 0
 69c:	fc 01       	movw	r30, r24
 69e:	11 82       	std	Z+1, r1	; 0x01
 6a0:	10 82       	st	Z, r1
	//Reset interruptbit
	TIFR1 = 1 << 1;
 6a2:	86 e3       	ldi	r24, 0x36	; 54
 6a4:	90 e0       	ldi	r25, 0x00	; 0
 6a6:	22 e0       	ldi	r18, 0x02	; 2
 6a8:	fc 01       	movw	r30, r24
 6aa:	20 83       	st	Z, r18
	//Enable interrupts
	sei();
 6ac:	78 94       	sei
	//Return to task
	reti();
 6ae:	18 95       	reti

000006b0 <malloc>:
 6b0:	cf 93       	push	r28
 6b2:	df 93       	push	r29
 6b4:	82 30       	cpi	r24, 0x02	; 2
 6b6:	91 05       	cpc	r25, r1
 6b8:	10 f4       	brcc	.+4      	; 0x6be <malloc+0xe>
 6ba:	82 e0       	ldi	r24, 0x02	; 2
 6bc:	90 e0       	ldi	r25, 0x00	; 0
 6be:	e0 91 38 01 	lds	r30, 0x0138
 6c2:	f0 91 39 01 	lds	r31, 0x0139
 6c6:	20 e0       	ldi	r18, 0x00	; 0
 6c8:	30 e0       	ldi	r19, 0x00	; 0
 6ca:	c0 e0       	ldi	r28, 0x00	; 0
 6cc:	d0 e0       	ldi	r29, 0x00	; 0
 6ce:	30 97       	sbiw	r30, 0x00	; 0
 6d0:	11 f1       	breq	.+68     	; 0x716 <malloc+0x66>
 6d2:	40 81       	ld	r20, Z
 6d4:	51 81       	ldd	r21, Z+1	; 0x01
 6d6:	48 17       	cp	r20, r24
 6d8:	59 07       	cpc	r21, r25
 6da:	c0 f0       	brcs	.+48     	; 0x70c <malloc+0x5c>
 6dc:	48 17       	cp	r20, r24
 6de:	59 07       	cpc	r21, r25
 6e0:	61 f4       	brne	.+24     	; 0x6fa <malloc+0x4a>
 6e2:	82 81       	ldd	r24, Z+2	; 0x02
 6e4:	93 81       	ldd	r25, Z+3	; 0x03
 6e6:	20 97       	sbiw	r28, 0x00	; 0
 6e8:	19 f0       	breq	.+6      	; 0x6f0 <malloc+0x40>
 6ea:	9b 83       	std	Y+3, r25	; 0x03
 6ec:	8a 83       	std	Y+2, r24	; 0x02
 6ee:	2b c0       	rjmp	.+86     	; 0x746 <malloc+0x96>
 6f0:	90 93 39 01 	sts	0x0139, r25
 6f4:	80 93 38 01 	sts	0x0138, r24
 6f8:	26 c0       	rjmp	.+76     	; 0x746 <malloc+0x96>
 6fa:	21 15       	cp	r18, r1
 6fc:	31 05       	cpc	r19, r1
 6fe:	19 f0       	breq	.+6      	; 0x706 <malloc+0x56>
 700:	42 17       	cp	r20, r18
 702:	53 07       	cpc	r21, r19
 704:	18 f4       	brcc	.+6      	; 0x70c <malloc+0x5c>
 706:	9a 01       	movw	r18, r20
 708:	be 01       	movw	r22, r28
 70a:	df 01       	movw	r26, r30
 70c:	ef 01       	movw	r28, r30
 70e:	02 80       	ldd	r0, Z+2	; 0x02
 710:	f3 81       	ldd	r31, Z+3	; 0x03
 712:	e0 2d       	mov	r30, r0
 714:	dc cf       	rjmp	.-72     	; 0x6ce <malloc+0x1e>
 716:	21 15       	cp	r18, r1
 718:	31 05       	cpc	r19, r1
 71a:	09 f1       	breq	.+66     	; 0x75e <malloc+0xae>
 71c:	28 1b       	sub	r18, r24
 71e:	39 0b       	sbc	r19, r25
 720:	24 30       	cpi	r18, 0x04	; 4
 722:	31 05       	cpc	r19, r1
 724:	90 f4       	brcc	.+36     	; 0x74a <malloc+0x9a>
 726:	12 96       	adiw	r26, 0x02	; 2
 728:	8d 91       	ld	r24, X+
 72a:	9c 91       	ld	r25, X
 72c:	13 97       	sbiw	r26, 0x03	; 3
 72e:	61 15       	cp	r22, r1
 730:	71 05       	cpc	r23, r1
 732:	21 f0       	breq	.+8      	; 0x73c <malloc+0x8c>
 734:	fb 01       	movw	r30, r22
 736:	93 83       	std	Z+3, r25	; 0x03
 738:	82 83       	std	Z+2, r24	; 0x02
 73a:	04 c0       	rjmp	.+8      	; 0x744 <malloc+0x94>
 73c:	90 93 39 01 	sts	0x0139, r25
 740:	80 93 38 01 	sts	0x0138, r24
 744:	fd 01       	movw	r30, r26
 746:	32 96       	adiw	r30, 0x02	; 2
 748:	44 c0       	rjmp	.+136    	; 0x7d2 <malloc+0x122>
 74a:	fd 01       	movw	r30, r26
 74c:	e2 0f       	add	r30, r18
 74e:	f3 1f       	adc	r31, r19
 750:	81 93       	st	Z+, r24
 752:	91 93       	st	Z+, r25
 754:	22 50       	subi	r18, 0x02	; 2
 756:	31 09       	sbc	r19, r1
 758:	2d 93       	st	X+, r18
 75a:	3c 93       	st	X, r19
 75c:	3a c0       	rjmp	.+116    	; 0x7d2 <malloc+0x122>
 75e:	20 91 36 01 	lds	r18, 0x0136
 762:	30 91 37 01 	lds	r19, 0x0137
 766:	23 2b       	or	r18, r19
 768:	41 f4       	brne	.+16     	; 0x77a <malloc+0xca>
 76a:	20 91 02 01 	lds	r18, 0x0102
 76e:	30 91 03 01 	lds	r19, 0x0103
 772:	30 93 37 01 	sts	0x0137, r19
 776:	20 93 36 01 	sts	0x0136, r18
 77a:	20 91 00 01 	lds	r18, 0x0100
 77e:	30 91 01 01 	lds	r19, 0x0101
 782:	21 15       	cp	r18, r1
 784:	31 05       	cpc	r19, r1
 786:	41 f4       	brne	.+16     	; 0x798 <malloc+0xe8>
 788:	2d b7       	in	r18, 0x3d	; 61
 78a:	3e b7       	in	r19, 0x3e	; 62
 78c:	40 91 04 01 	lds	r20, 0x0104
 790:	50 91 05 01 	lds	r21, 0x0105
 794:	24 1b       	sub	r18, r20
 796:	35 0b       	sbc	r19, r21
 798:	e0 91 36 01 	lds	r30, 0x0136
 79c:	f0 91 37 01 	lds	r31, 0x0137
 7a0:	e2 17       	cp	r30, r18
 7a2:	f3 07       	cpc	r31, r19
 7a4:	a0 f4       	brcc	.+40     	; 0x7ce <malloc+0x11e>
 7a6:	2e 1b       	sub	r18, r30
 7a8:	3f 0b       	sbc	r19, r31
 7aa:	28 17       	cp	r18, r24
 7ac:	39 07       	cpc	r19, r25
 7ae:	78 f0       	brcs	.+30     	; 0x7ce <malloc+0x11e>
 7b0:	ac 01       	movw	r20, r24
 7b2:	4e 5f       	subi	r20, 0xFE	; 254
 7b4:	5f 4f       	sbci	r21, 0xFF	; 255
 7b6:	24 17       	cp	r18, r20
 7b8:	35 07       	cpc	r19, r21
 7ba:	48 f0       	brcs	.+18     	; 0x7ce <malloc+0x11e>
 7bc:	4e 0f       	add	r20, r30
 7be:	5f 1f       	adc	r21, r31
 7c0:	50 93 37 01 	sts	0x0137, r21
 7c4:	40 93 36 01 	sts	0x0136, r20
 7c8:	81 93       	st	Z+, r24
 7ca:	91 93       	st	Z+, r25
 7cc:	02 c0       	rjmp	.+4      	; 0x7d2 <malloc+0x122>
 7ce:	e0 e0       	ldi	r30, 0x00	; 0
 7d0:	f0 e0       	ldi	r31, 0x00	; 0
 7d2:	cf 01       	movw	r24, r30
 7d4:	df 91       	pop	r29
 7d6:	cf 91       	pop	r28
 7d8:	08 95       	ret

000007da <free>:
 7da:	0f 93       	push	r16
 7dc:	1f 93       	push	r17
 7de:	cf 93       	push	r28
 7e0:	df 93       	push	r29
 7e2:	00 97       	sbiw	r24, 0x00	; 0
 7e4:	09 f4       	brne	.+2      	; 0x7e8 <free+0xe>
 7e6:	8c c0       	rjmp	.+280    	; 0x900 <__stack+0x1>
 7e8:	fc 01       	movw	r30, r24
 7ea:	32 97       	sbiw	r30, 0x02	; 2
 7ec:	13 82       	std	Z+3, r1	; 0x03
 7ee:	12 82       	std	Z+2, r1	; 0x02
 7f0:	00 91 38 01 	lds	r16, 0x0138
 7f4:	10 91 39 01 	lds	r17, 0x0139
 7f8:	01 15       	cp	r16, r1
 7fa:	11 05       	cpc	r17, r1
 7fc:	81 f4       	brne	.+32     	; 0x81e <free+0x44>
 7fe:	20 81       	ld	r18, Z
 800:	31 81       	ldd	r19, Z+1	; 0x01
 802:	82 0f       	add	r24, r18
 804:	93 1f       	adc	r25, r19
 806:	20 91 36 01 	lds	r18, 0x0136
 80a:	30 91 37 01 	lds	r19, 0x0137
 80e:	28 17       	cp	r18, r24
 810:	39 07       	cpc	r19, r25
 812:	79 f5       	brne	.+94     	; 0x872 <free+0x98>
 814:	f0 93 37 01 	sts	0x0137, r31
 818:	e0 93 36 01 	sts	0x0136, r30
 81c:	71 c0       	rjmp	.+226    	; 0x900 <__stack+0x1>
 81e:	d8 01       	movw	r26, r16
 820:	40 e0       	ldi	r20, 0x00	; 0
 822:	50 e0       	ldi	r21, 0x00	; 0
 824:	ae 17       	cp	r26, r30
 826:	bf 07       	cpc	r27, r31
 828:	50 f4       	brcc	.+20     	; 0x83e <free+0x64>
 82a:	12 96       	adiw	r26, 0x02	; 2
 82c:	2d 91       	ld	r18, X+
 82e:	3c 91       	ld	r19, X
 830:	13 97       	sbiw	r26, 0x03	; 3
 832:	ad 01       	movw	r20, r26
 834:	21 15       	cp	r18, r1
 836:	31 05       	cpc	r19, r1
 838:	09 f1       	breq	.+66     	; 0x87c <free+0xa2>
 83a:	d9 01       	movw	r26, r18
 83c:	f3 cf       	rjmp	.-26     	; 0x824 <free+0x4a>
 83e:	9d 01       	movw	r18, r26
 840:	da 01       	movw	r26, r20
 842:	33 83       	std	Z+3, r19	; 0x03
 844:	22 83       	std	Z+2, r18	; 0x02
 846:	60 81       	ld	r22, Z
 848:	71 81       	ldd	r23, Z+1	; 0x01
 84a:	86 0f       	add	r24, r22
 84c:	97 1f       	adc	r25, r23
 84e:	82 17       	cp	r24, r18
 850:	93 07       	cpc	r25, r19
 852:	69 f4       	brne	.+26     	; 0x86e <free+0x94>
 854:	ec 01       	movw	r28, r24
 856:	28 81       	ld	r18, Y
 858:	39 81       	ldd	r19, Y+1	; 0x01
 85a:	26 0f       	add	r18, r22
 85c:	37 1f       	adc	r19, r23
 85e:	2e 5f       	subi	r18, 0xFE	; 254
 860:	3f 4f       	sbci	r19, 0xFF	; 255
 862:	31 83       	std	Z+1, r19	; 0x01
 864:	20 83       	st	Z, r18
 866:	8a 81       	ldd	r24, Y+2	; 0x02
 868:	9b 81       	ldd	r25, Y+3	; 0x03
 86a:	93 83       	std	Z+3, r25	; 0x03
 86c:	82 83       	std	Z+2, r24	; 0x02
 86e:	45 2b       	or	r20, r21
 870:	29 f4       	brne	.+10     	; 0x87c <free+0xa2>
 872:	f0 93 39 01 	sts	0x0139, r31
 876:	e0 93 38 01 	sts	0x0138, r30
 87a:	42 c0       	rjmp	.+132    	; 0x900 <__stack+0x1>
 87c:	13 96       	adiw	r26, 0x03	; 3
 87e:	fc 93       	st	X, r31
 880:	ee 93       	st	-X, r30
 882:	12 97       	sbiw	r26, 0x02	; 2
 884:	ed 01       	movw	r28, r26
 886:	49 91       	ld	r20, Y+
 888:	59 91       	ld	r21, Y+
 88a:	9e 01       	movw	r18, r28
 88c:	24 0f       	add	r18, r20
 88e:	35 1f       	adc	r19, r21
 890:	e2 17       	cp	r30, r18
 892:	f3 07       	cpc	r31, r19
 894:	71 f4       	brne	.+28     	; 0x8b2 <free+0xd8>
 896:	80 81       	ld	r24, Z
 898:	91 81       	ldd	r25, Z+1	; 0x01
 89a:	84 0f       	add	r24, r20
 89c:	95 1f       	adc	r25, r21
 89e:	02 96       	adiw	r24, 0x02	; 2
 8a0:	11 96       	adiw	r26, 0x01	; 1
 8a2:	9c 93       	st	X, r25
 8a4:	8e 93       	st	-X, r24
 8a6:	82 81       	ldd	r24, Z+2	; 0x02
 8a8:	93 81       	ldd	r25, Z+3	; 0x03
 8aa:	13 96       	adiw	r26, 0x03	; 3
 8ac:	9c 93       	st	X, r25
 8ae:	8e 93       	st	-X, r24
 8b0:	12 97       	sbiw	r26, 0x02	; 2
 8b2:	e0 e0       	ldi	r30, 0x00	; 0
 8b4:	f0 e0       	ldi	r31, 0x00	; 0
 8b6:	d8 01       	movw	r26, r16
 8b8:	12 96       	adiw	r26, 0x02	; 2
 8ba:	8d 91       	ld	r24, X+
 8bc:	9c 91       	ld	r25, X
 8be:	13 97       	sbiw	r26, 0x03	; 3
 8c0:	00 97       	sbiw	r24, 0x00	; 0
 8c2:	19 f0       	breq	.+6      	; 0x8ca <free+0xf0>
 8c4:	f8 01       	movw	r30, r16
 8c6:	8c 01       	movw	r16, r24
 8c8:	f6 cf       	rjmp	.-20     	; 0x8b6 <free+0xdc>
 8ca:	8d 91       	ld	r24, X+
 8cc:	9c 91       	ld	r25, X
 8ce:	98 01       	movw	r18, r16
 8d0:	2e 5f       	subi	r18, 0xFE	; 254
 8d2:	3f 4f       	sbci	r19, 0xFF	; 255
 8d4:	82 0f       	add	r24, r18
 8d6:	93 1f       	adc	r25, r19
 8d8:	20 91 36 01 	lds	r18, 0x0136
 8dc:	30 91 37 01 	lds	r19, 0x0137
 8e0:	28 17       	cp	r18, r24
 8e2:	39 07       	cpc	r19, r25
 8e4:	69 f4       	brne	.+26     	; 0x900 <__stack+0x1>
 8e6:	30 97       	sbiw	r30, 0x00	; 0
 8e8:	29 f4       	brne	.+10     	; 0x8f4 <free+0x11a>
 8ea:	10 92 39 01 	sts	0x0139, r1
 8ee:	10 92 38 01 	sts	0x0138, r1
 8f2:	02 c0       	rjmp	.+4      	; 0x8f8 <free+0x11e>
 8f4:	13 82       	std	Z+3, r1	; 0x03
 8f6:	12 82       	std	Z+2, r1	; 0x02
 8f8:	10 93 37 01 	sts	0x0137, r17
 8fc:	00 93 36 01 	sts	0x0136, r16
 900:	df 91       	pop	r29
 902:	cf 91       	pop	r28
 904:	1f 91       	pop	r17
 906:	0f 91       	pop	r16
 908:	08 95       	ret

0000090a <_exit>:
 90a:	f8 94       	cli

0000090c <__stop_program>:
 90c:	ff cf       	rjmp	.-2      	; 0x90c <__stop_program>
