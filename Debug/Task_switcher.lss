
Task_switcher.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000a  00800100  000008ce  00000962  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000008ce  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000002a  0080010a  0080010a  0000096c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000096c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000099c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000070  00000000  00000000  000009dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000005f0  00000000  00000000  00000a4c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000002ea  00000000  00000000  0000103c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000027d  00000000  00000000  00001326  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000c8  00000000  00000000  000015a4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000035f  00000000  00000000  0000166c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000017a  00000000  00000000  000019cb  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  00001b45  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 8c 00 	jmp	0x118	; 0x118 <__vector_11>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ee ec       	ldi	r30, 0xCE	; 206
  7c:	f8 e0       	ldi	r31, 0x08	; 8
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	aa 30       	cpi	r26, 0x0A	; 10
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	aa e0       	ldi	r26, 0x0A	; 10
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a4 33       	cpi	r26, 0x34	; 52
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 64 00 	call	0xc8	; 0xc8 <main>
  9e:	0c 94 65 04 	jmp	0x8ca	; 0x8ca <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <_Z5task2v>:
	long b = 0;
	while(1){
		b++;
		//PORTB = (1 << PINB5);
		b = 0;
	}
  a6:	ff cf       	rjmp	.-2      	; 0xa6 <_Z5task2v>

000000a8 <_Z5task1v>:
		PORTB = (0 << PINB5);
		a = 0;
		//
		sleep(20);
		//
		PORTB = (1 << PINB5);
  a8:	c0 e2       	ldi	r28, 0x20	; 32
{
	long a = 0;
	while(1){
		a++;
		//
		PORTB = (0 << PINB5);
  aa:	15 b8       	out	0x05, r1	; 5
		a = 0;
		//
		sleep(20);
  ac:	64 e1       	ldi	r22, 0x14	; 20
  ae:	70 e0       	ldi	r23, 0x00	; 0
  b0:	80 e0       	ldi	r24, 0x00	; 0
  b2:	90 e0       	ldi	r25, 0x00	; 0
  b4:	0e 94 d4 02 	call	0x5a8	; 0x5a8 <_Z5sleepl>
		//
		PORTB = (1 << PINB5);
  b8:	c5 b9       	out	0x05, r28	; 5
		//
		sleep(20);
  ba:	64 e1       	ldi	r22, 0x14	; 20
  bc:	70 e0       	ldi	r23, 0x00	; 0
  be:	80 e0       	ldi	r24, 0x00	; 0
  c0:	90 e0       	ldi	r25, 0x00	; 0
  c2:	0e 94 d4 02 	call	0x5a8	; 0x5a8 <_Z5sleepl>
	}
  c6:	f1 cf       	rjmp	.-30     	; 0xaa <_Z5task1v+0x2>

000000c8 <main>:
int task1();
int task2();

int main()
{
	init_task((int)task1);
  c8:	84 e5       	ldi	r24, 0x54	; 84
  ca:	90 e0       	ldi	r25, 0x00	; 0
  cc:	0e 94 f8 01 	call	0x3f0	; 0x3f0 <_Z9init_taski>
	init_task((int)task2);
  d0:	83 e5       	ldi	r24, 0x53	; 83
  d2:	90 e0       	ldi	r25, 0x00	; 0
  d4:	0e 94 f8 01 	call	0x3f0	; 0x3f0 <_Z9init_taski>
	start();
  d8:	0e 94 8f 02 	call	0x51e	; 0x51e <_Z5startv>
}
  dc:	80 e0       	ldi	r24, 0x00	; 0
  de:	90 e0       	ldi	r25, 0x00	; 0
  e0:	08 95       	ret

000000e2 <_Z12task_wrapperv>:
register unsigned char reg1 asm("r2");
register unsigned char reg2 asm("r3");

void task_wrapper()
{
	int (*task)() = (int(*)())current_node_ready->task->address;
  e2:	e0 91 22 01 	lds	r30, 0x0122
  e6:	f0 91 23 01 	lds	r31, 0x0123
  ea:	01 90       	ld	r0, Z+
  ec:	f0 81       	ld	r31, Z
  ee:	e0 2d       	mov	r30, r0
	task();
  f0:	04 84       	ldd	r0, Z+12	; 0x0c
  f2:	f5 85       	ldd	r31, Z+13	; 0x0d
  f4:	e0 2d       	mov	r30, r0
  f6:	09 95       	icall
	cli();
  f8:	f8 94       	cli
	current_node_ready->task->markedforremoval = 1;
  fa:	e0 91 22 01 	lds	r30, 0x0122
  fe:	f0 91 23 01 	lds	r31, 0x0123
 102:	01 90       	ld	r0, Z+
 104:	f0 81       	ld	r31, Z
 106:	e0 2d       	mov	r30, r0
 108:	81 e0       	ldi	r24, 0x01	; 1
 10a:	90 e0       	ldi	r25, 0x00	; 0
 10c:	93 8b       	std	Z+19, r25	; 0x13
 10e:	82 8b       	std	Z+18, r24	; 0x12
	//End of task, jump to ISR
	asm("ijmp" :: "z" (TIMER1_COMPA_vect));
 110:	ec e8       	ldi	r30, 0x8C	; 140
 112:	f0 e0       	ldi	r31, 0x00	; 0
 114:	09 94       	ijmp
 116:	08 95       	ret

00000118 <__vector_11>:

ISR (TIMER1_COMPA_vect)
{
	static int dispatcher = 1;
	//Disable interrupts
	cli();
 118:	f8 94       	cli
	
	//If the isr is called because a task has ended prematurely
	//we are going to switch tasks so we enable the dispatcher
	if(returnFromBlocked){
 11a:	80 91 2c 01 	lds	r24, 0x012C
 11e:	90 91 2d 01 	lds	r25, 0x012D
 122:	89 2b       	or	r24, r25
 124:	59 f0       	breq	.+22     	; 0x13c <__vector_11+0x24>
		dispatcher = 1;
 126:	81 e0       	ldi	r24, 0x01	; 1
 128:	90 e0       	ldi	r25, 0x00	; 0
 12a:	90 93 07 01 	sts	0x0107, r25
 12e:	80 93 06 01 	sts	0x0106, r24
		returnFromBlocked = 0;
 132:	10 92 2d 01 	sts	0x012D, r1
 136:	10 92 2c 01 	sts	0x012C, r1
 13a:	0a c0       	rjmp	.+20     	; 0x150 <__vector_11+0x38>
	} else {		
		//Toggle dispatcher every 1 ms
		dispatcher ^= 1;
 13c:	80 91 06 01 	lds	r24, 0x0106
 140:	90 91 07 01 	lds	r25, 0x0107
 144:	21 e0       	ldi	r18, 0x01	; 1
 146:	82 27       	eor	r24, r18
 148:	90 93 07 01 	sts	0x0107, r25
 14c:	80 93 06 01 	sts	0x0106, r24
	}
	
	if(amountBlockedTasks > 0) {
 150:	20 91 28 01 	lds	r18, 0x0128
 154:	30 91 29 01 	lds	r19, 0x0129
 158:	12 16       	cp	r1, r18
 15a:	13 06       	cpc	r1, r19
 15c:	2c f0       	brlt	.+10     	; 0x168 <__vector_11+0x50>
 15e:	40 91 22 01 	lds	r20, 0x0122
 162:	50 91 23 01 	lds	r21, 0x0123
 166:	70 c0       	rjmp	.+224    	; 0x248 <__vector_11+0x130>
		int amountBlockedTasksRemoved = 0;
		
		for(int i = 0; i <  amountBlockedTasks; i++){
 168:	20 91 28 01 	lds	r18, 0x0128
 16c:	30 91 29 01 	lds	r19, 0x0129
 170:	12 16       	cp	r1, r18
 172:	13 06       	cpc	r1, r19
 174:	3c f0       	brlt	.+14     	; 0x184 <__vector_11+0x6c>
 176:	40 91 22 01 	lds	r20, 0x0122
 17a:	50 91 23 01 	lds	r21, 0x0123
 17e:	60 e0       	ldi	r22, 0x00	; 0
 180:	70 e0       	ldi	r23, 0x00	; 0
 182:	58 c0       	rjmp	.+176    	; 0x234 <__vector_11+0x11c>
 184:	40 91 22 01 	lds	r20, 0x0122
 188:	50 91 23 01 	lds	r21, 0x0123
			if(blockedQueue[i]->task->sleepCounter > 0){
				blockedQueue[i]->task->sleepCounter -= kernel_settings.isrTicks;
 18c:	c0 90 0a 01 	lds	r12, 0x010A
 190:	d0 90 0b 01 	lds	r13, 0x010B
 194:	0d 2c       	mov	r0, r13
 196:	00 0c       	add	r0, r0
 198:	ee 08       	sbc	r14, r14
 19a:	ff 08       	sbc	r15, r15
 19c:	ec e0       	ldi	r30, 0x0C	; 12
 19e:	f1 e0       	ldi	r31, 0x01	; 1
 1a0:	20 e0       	ldi	r18, 0x00	; 0
 1a2:	30 e0       	ldi	r19, 0x00	; 0
 1a4:	60 e0       	ldi	r22, 0x00	; 0
 1a6:	70 e0       	ldi	r23, 0x00	; 0
	
	if(amountBlockedTasks > 0) {
		int amountBlockedTasksRemoved = 0;
		
		for(int i = 0; i <  amountBlockedTasks; i++){
			if(blockedQueue[i]->task->sleepCounter > 0){
 1a8:	00 81       	ld	r16, Z
 1aa:	11 81       	ldd	r17, Z+1	; 0x01
 1ac:	d8 01       	movw	r26, r16
 1ae:	cd 91       	ld	r28, X+
 1b0:	dc 91       	ld	r29, X
 1b2:	8c 89       	ldd	r24, Y+20	; 0x14
 1b4:	9d 89       	ldd	r25, Y+21	; 0x15
 1b6:	ae 89       	ldd	r26, Y+22	; 0x16
 1b8:	bf 89       	ldd	r27, Y+23	; 0x17
 1ba:	18 16       	cp	r1, r24
 1bc:	19 06       	cpc	r1, r25
 1be:	1a 06       	cpc	r1, r26
 1c0:	1b 06       	cpc	r1, r27
 1c2:	4c f4       	brge	.+18     	; 0x1d6 <__vector_11+0xbe>
				blockedQueue[i]->task->sleepCounter -= kernel_settings.isrTicks;
 1c4:	8c 19       	sub	r24, r12
 1c6:	9d 09       	sbc	r25, r13
 1c8:	ae 09       	sbc	r26, r14
 1ca:	bf 09       	sbc	r27, r15
 1cc:	8c 8b       	std	Y+20, r24	; 0x14
 1ce:	9d 8b       	std	Y+21, r25	; 0x15
 1d0:	ae 8b       	std	Y+22, r26	; 0x16
 1d2:	bf 8b       	std	Y+23, r27	; 0x17
 1d4:	20 c0       	rjmp	.+64     	; 0x216 <__vector_11+0xfe>
			} else {
				blockedQueue[i]->task->sleepCounter = 0;
 1d6:	1c 8a       	std	Y+20, r1	; 0x14
 1d8:	1d 8a       	std	Y+21, r1	; 0x15
 1da:	1e 8a       	std	Y+22, r1	; 0x16
 1dc:	1f 8a       	std	Y+23, r1	; 0x17

				current_node_ready->next->previous = blockedQueue[i];
 1de:	ea 01       	movw	r28, r20
 1e0:	aa 81       	ldd	r26, Y+2	; 0x02
 1e2:	bb 81       	ldd	r27, Y+3	; 0x03
 1e4:	15 96       	adiw	r26, 0x05	; 5
 1e6:	1c 93       	st	X, r17
 1e8:	0e 93       	st	-X, r16
 1ea:	14 97       	sbiw	r26, 0x04	; 4
				blockedQueue[i]->next = current_node_ready->next;
 1ec:	c0 81       	ld	r28, Z
 1ee:	d1 81       	ldd	r29, Z+1	; 0x01
 1f0:	bb 83       	std	Y+3, r27	; 0x03
 1f2:	aa 83       	std	Y+2, r26	; 0x02
				blockedQueue[i]->previous = current_node_ready;
 1f4:	a0 81       	ld	r26, Z
 1f6:	b1 81       	ldd	r27, Z+1	; 0x01
 1f8:	15 96       	adiw	r26, 0x05	; 5
 1fa:	5c 93       	st	X, r21
 1fc:	4e 93       	st	-X, r20
 1fe:	14 97       	sbiw	r26, 0x04	; 4
				current_node_ready->next = blockedQueue[i];
 200:	80 81       	ld	r24, Z
 202:	91 81       	ldd	r25, Z+1	; 0x01
 204:	da 01       	movw	r26, r20
 206:	13 96       	adiw	r26, 0x03	; 3
 208:	9c 93       	st	X, r25
 20a:	8e 93       	st	-X, r24
 20c:	12 97       	sbiw	r26, 0x02	; 2
				blockedQueue[i] = NULL;
 20e:	11 82       	std	Z+1, r1	; 0x01
 210:	10 82       	st	Z, r1
				amountBlockedTasksRemoved++;
 212:	6f 5f       	subi	r22, 0xFF	; 255
 214:	7f 4f       	sbci	r23, 0xFF	; 255
	}
	
	if(amountBlockedTasks > 0) {
		int amountBlockedTasksRemoved = 0;
		
		for(int i = 0; i <  amountBlockedTasks; i++){
 216:	2f 5f       	subi	r18, 0xFF	; 255
 218:	3f 4f       	sbci	r19, 0xFF	; 255
 21a:	80 91 28 01 	lds	r24, 0x0128
 21e:	90 91 29 01 	lds	r25, 0x0129
 222:	32 96       	adiw	r30, 0x02	; 2
 224:	28 17       	cp	r18, r24
 226:	39 07       	cpc	r19, r25
 228:	0c f4       	brge	.+2      	; 0x22c <__vector_11+0x114>
 22a:	be cf       	rjmp	.-132    	; 0x1a8 <__vector_11+0x90>
 22c:	80 91 06 01 	lds	r24, 0x0106
 230:	90 91 07 01 	lds	r25, 0x0107
				current_node_ready->next = blockedQueue[i];
				blockedQueue[i] = NULL;
				amountBlockedTasksRemoved++;
			}
		}
		amountBlockedTasks -= amountBlockedTasksRemoved;
 234:	20 91 28 01 	lds	r18, 0x0128
 238:	30 91 29 01 	lds	r19, 0x0129
 23c:	26 1b       	sub	r18, r22
 23e:	37 0b       	sbc	r19, r23
 240:	30 93 29 01 	sts	0x0129, r19
 244:	20 93 28 01 	sts	0x0128, r18
	}


	//Do not switch context on first run
	if(firstrun){
 248:	20 91 08 01 	lds	r18, 0x0108
 24c:	30 91 09 01 	lds	r19, 0x0109
 250:	21 15       	cp	r18, r1
 252:	31 05       	cpc	r19, r1
 254:	21 f4       	brne	.+8      	; 0x25e <__vector_11+0x146>
 256:	ea 01       	movw	r28, r20
 258:	e8 81       	ld	r30, Y
 25a:	f9 81       	ldd	r31, Y+1	; 0x01
 25c:	1a c0       	rjmp	.+52     	; 0x292 <__vector_11+0x17a>
		//Only run once
		firstrun = 0;
 25e:	10 92 09 01 	sts	0x0109, r1
 262:	10 92 08 01 	sts	0x0108, r1
		//Set stack pointer
		asm volatile("MOV r0, %[lowAddress] " :: [lowAddress] "r" (current_node_ready->task->spl));
 266:	da 01       	movw	r26, r20
 268:	ed 91       	ld	r30, X+
 26a:	fc 91       	ld	r31, X
 26c:	11 97       	sbiw	r26, 0x01	; 1
 26e:	24 81       	ldd	r18, Z+4	; 0x04
 270:	35 81       	ldd	r19, Z+5	; 0x05
 272:	02 2e       	mov	r0, r18
		asm volatile("OUT __SP_L__, r0");
 274:	0d be       	out	0x3d, r0	; 61
		asm volatile("MOV r0, %[highAddress] " :: [highAddress] "r" (current_node_ready->task->sph));
 276:	22 81       	ldd	r18, Z+2	; 0x02
 278:	33 81       	ldd	r19, Z+3	; 0x03
 27a:	02 2e       	mov	r0, r18
		asm volatile("OUT __SP_H__, r0");
 27c:	0e be       	out	0x3e, r0	; 62
		
		asm("MOV R18, %[lowAdress]" :: [lowAdress] "r" (current_node_ready->task->pcl));
 27e:	20 85       	ldd	r18, Z+8	; 0x08
 280:	31 85       	ldd	r19, Z+9	; 0x09
 282:	22 2f       	mov	r18, r18
		asm("PUSH R18");
 284:	2f 93       	push	r18
		asm("MOV R18, %[highAdress]" :: [highAdress] "r" (current_node_ready->task->pch));
 286:	22 85       	ldd	r18, Z+10	; 0x0a
 288:	33 85       	ldd	r19, Z+11	; 0x0b
 28a:	22 2f       	mov	r18, r18
		asm("PUSH 18");
 28c:	2f 93       	push	r18
		current_node_ready->task->firsttime = 0;
 28e:	11 8a       	std	Z+17, r1	; 0x11
 290:	10 8a       	std	Z+16, r1	; 0x10
		
	}
	if(dispatcher || current_node_ready->task->markedforremoval) {
 292:	89 2b       	or	r24, r25
 294:	31 f4       	brne	.+12     	; 0x2a2 <__vector_11+0x18a>
 296:	82 89       	ldd	r24, Z+18	; 0x12
 298:	93 89       	ldd	r25, Z+19	; 0x13
 29a:	00 97       	sbiw	r24, 0x00	; 0
 29c:	09 f0       	breq	.+2      	; 0x2a0 <__vector_11+0x188>
 29e:	34 c0       	rjmp	.+104    	; 0x308 <__vector_11+0x1f0>
 2a0:	a5 c0       	rjmp	.+330    	; 0x3ec <__vector_11+0x2d4>
		//Save context only if task is not marked for removal
		if(!current_node_ready->task->markedforremoval) {
 2a2:	82 89       	ldd	r24, Z+18	; 0x12
 2a4:	93 89       	ldd	r25, Z+19	; 0x13
 2a6:	89 2b       	or	r24, r25
 2a8:	09 f0       	breq	.+2      	; 0x2ac <__vector_11+0x194>
 2aa:	2e c0       	rjmp	.+92     	; 0x308 <__vector_11+0x1f0>
			"push  r26                   \n\t" \
			"push  r27                   \n\t" \
			"push  r28                   \n\t" \
			"push  r29                   \n\t" \
			"push  r30                   \n\t" \
			"push  r31                   \n\t");
 2ac:	0f 92       	push	r0
 2ae:	0f b6       	in	r0, 0x3f	; 63
 2b0:	f8 94       	cli
 2b2:	0f 92       	push	r0
 2b4:	1f 92       	push	r1
 2b6:	11 24       	eor	r1, r1
 2b8:	2f 92       	push	r2
 2ba:	3f 92       	push	r3
 2bc:	4f 92       	push	r4
 2be:	5f 92       	push	r5
 2c0:	6f 92       	push	r6
 2c2:	7f 92       	push	r7
 2c4:	8f 92       	push	r8
 2c6:	9f 92       	push	r9
 2c8:	af 92       	push	r10
 2ca:	bf 92       	push	r11
 2cc:	cf 92       	push	r12
 2ce:	df 92       	push	r13
 2d0:	ef 92       	push	r14
 2d2:	ff 92       	push	r15
 2d4:	0f 93       	push	r16
 2d6:	1f 93       	push	r17
 2d8:	2f 93       	push	r18
 2da:	3f 93       	push	r19
 2dc:	4f 93       	push	r20
 2de:	5f 93       	push	r21
 2e0:	6f 93       	push	r22
 2e2:	7f 93       	push	r23
 2e4:	8f 93       	push	r24
 2e6:	9f 93       	push	r25
 2e8:	af 93       	push	r26
 2ea:	bf 93       	push	r27
 2ec:	cf 93       	push	r28
 2ee:	df 93       	push	r29
 2f0:	ef 93       	push	r30
 2f2:	ff 93       	push	r31
			
			//Store stackpointer in TCB
			
			asm volatile("in    r2, __SP_L__");
 2f4:	2d b6       	in	r2, 0x3d	; 61
			current_node_ready->task->spl = reg1;
 2f6:	82 2d       	mov	r24, r2
 2f8:	90 e0       	ldi	r25, 0x00	; 0
 2fa:	95 83       	std	Z+5, r25	; 0x05
 2fc:	84 83       	std	Z+4, r24	; 0x04
			//asm volatile("STS %0,R25", :: "=r" (a));
			//asm volatile("MOV %[lowAdress], r0 ": [lowAdress] "=r" (a) :);
			//current_node->task->spl = a;
			//current_node->task->spl = regReader;
			
			asm volatile("in    r3, __SP_H__");
 2fe:	3e b6       	in	r3, 0x3e	; 62
			current_node_ready->task->sph = reg2;
 300:	83 2d       	mov	r24, r3
 302:	90 e0       	ldi	r25, 0x00	; 0
 304:	93 83       	std	Z+3, r25	; 0x03
 306:	82 83       	std	Z+2, r24	; 0x02
			//asm volatile("MOV %[highAdress], r0 ": [highAdress] "=r" (b) : );
			//current_node->task->sph = b;
		}
	
		//Select the current task
		if(current_node_ready->next->task->markedforremoval){
 308:	ea 01       	movw	r28, r20
 30a:	aa 81       	ldd	r26, Y+2	; 0x02
 30c:	bb 81       	ldd	r27, Y+3	; 0x03
 30e:	ed 91       	ld	r30, X+
 310:	fc 91       	ld	r31, X
 312:	11 97       	sbiw	r26, 0x01	; 1
 314:	82 89       	ldd	r24, Z+18	; 0x12
 316:	93 89       	ldd	r25, Z+19	; 0x13
 318:	89 2b       	or	r24, r25
 31a:	19 f1       	breq	.+70     	; 0x362 <__vector_11+0x24a>
			//Remember the task for removal
			temp = current_node_ready->next;
 31c:	b0 93 21 01 	sts	0x0121, r27
 320:	a0 93 20 01 	sts	0x0120, r26
			//Skip the task for removal
			current_node_ready->next = current_node_ready->next->next;
 324:	12 96       	adiw	r26, 0x02	; 2
 326:	0d 90       	ld	r0, X+
 328:	bc 91       	ld	r27, X
 32a:	a0 2d       	mov	r26, r0
 32c:	bb 83       	std	Y+3, r27	; 0x03
 32e:	aa 83       	std	Y+2, r26	; 0x02
			//Set the  previous node to the current node
			current_node_ready->next->previous = current_node_ready;
 330:	15 96       	adiw	r26, 0x05	; 5
 332:	5c 93       	st	X, r21
 334:	4e 93       	st	-X, r20
 336:	14 97       	sbiw	r26, 0x04	; 4
			//Select the next node
			current_node_ready = current_node_ready->next;
 338:	b0 93 23 01 	sts	0x0123, r27
 33c:	a0 93 22 01 	sts	0x0122, r26
			
			//Delete the task to be removed
			free(temp->task);
 340:	cf 01       	movw	r24, r30
 342:	0e 94 cd 03 	call	0x79a	; 0x79a <free>
			temp->next = 0;
			free(temp);
 346:	80 91 20 01 	lds	r24, 0x0120
 34a:	90 91 21 01 	lds	r25, 0x0121
 34e:	0e 94 cd 03 	call	0x79a	; 0x79a <free>
 352:	e0 91 22 01 	lds	r30, 0x0122
 356:	f0 91 23 01 	lds	r31, 0x0123
 35a:	01 90       	ld	r0, Z+
 35c:	f0 81       	ld	r31, Z
 35e:	e0 2d       	mov	r30, r0
 360:	04 c0       	rjmp	.+8      	; 0x36a <__vector_11+0x252>
		} else {
			current_node_ready = current_node_ready->next;
 362:	b0 93 23 01 	sts	0x0123, r27
 366:	a0 93 22 01 	sts	0x0122, r26
		}
		
		//If the task is running for the first time we do not need to load the context from the stack
		if(current_node_ready->task->firsttime){
 36a:	80 89       	ldd	r24, Z+16	; 0x10
 36c:	91 89       	ldd	r25, Z+17	; 0x11
 36e:	89 2b       	or	r24, r25
 370:	99 f0       	breq	.+38     	; 0x398 <__vector_11+0x280>
			asm volatile("MOV r0, %[lowAddress] " :: [lowAddress] "r" (current_node_ready->task->spl));
 372:	84 81       	ldd	r24, Z+4	; 0x04
 374:	95 81       	ldd	r25, Z+5	; 0x05
 376:	08 2e       	mov	r0, r24
			asm volatile("OUT __SP_L__, r0");
 378:	0d be       	out	0x3d, r0	; 61
			asm volatile("MOV r0, %[highAddress] " :: [highAddress] "r" (current_node_ready->task->sph));
 37a:	82 81       	ldd	r24, Z+2	; 0x02
 37c:	93 81       	ldd	r25, Z+3	; 0x03
 37e:	08 2e       	mov	r0, r24
			asm volatile("OUT __SP_H__, r0");
 380:	0e be       	out	0x3e, r0	; 62
			
			asm("MOV R18, %[lowAdress]" :: [lowAdress] "r" (current_node_ready->task->pcl));
 382:	80 85       	ldd	r24, Z+8	; 0x08
 384:	91 85       	ldd	r25, Z+9	; 0x09
 386:	28 2f       	mov	r18, r24
			asm("PUSH R18");
 388:	2f 93       	push	r18
			asm("MOV R18, %[highAdress]" :: [highAdress] "r" (current_node_ready->task->pch));
 38a:	82 85       	ldd	r24, Z+10	; 0x0a
 38c:	93 85       	ldd	r25, Z+11	; 0x0b
 38e:	28 2f       	mov	r18, r24
			asm("PUSH 18");
 390:	2f 93       	push	r18
			current_node_ready->task->firsttime = 0;
 392:	11 8a       	std	Z+17, r1	; 0x11
 394:	10 8a       	std	Z+16, r1	; 0x10
 396:	2a c0       	rjmp	.+84     	; 0x3ec <__vector_11+0x2d4>
		} else {
			//Load stack pointers
			asm volatile("MOV r0, %[lowAddress] " :: [lowAddress] "r" (current_node_ready->task->spl));
 398:	84 81       	ldd	r24, Z+4	; 0x04
 39a:	95 81       	ldd	r25, Z+5	; 0x05
 39c:	08 2e       	mov	r0, r24
			asm volatile("OUT __SP_L__, r0");
 39e:	0d be       	out	0x3d, r0	; 61
			asm volatile("MOV r0, %[highAddress] " :: [highAddress] "r" (current_node_ready->task->sph));
 3a0:	82 81       	ldd	r24, Z+2	; 0x02
 3a2:	93 81       	ldd	r25, Z+3	; 0x03
 3a4:	08 2e       	mov	r0, r24
			asm volatile("OUT __SP_H__, r0");
 3a6:	0e be       	out	0x3e, r0	; 62
			"pop  r2                     \n\t" \
			"pop  r1                     \n\t" \
			"pop  r0                     \n\t" \
			"out  __SREG__, r0           \n\t" \
			"pop  r0                     \n\t" \
			);
 3a8:	ff 91       	pop	r31
 3aa:	ef 91       	pop	r30
 3ac:	df 91       	pop	r29
 3ae:	cf 91       	pop	r28
 3b0:	bf 91       	pop	r27
 3b2:	af 91       	pop	r26
 3b4:	9f 91       	pop	r25
 3b6:	8f 91       	pop	r24
 3b8:	7f 91       	pop	r23
 3ba:	6f 91       	pop	r22
 3bc:	5f 91       	pop	r21
 3be:	4f 91       	pop	r20
 3c0:	3f 91       	pop	r19
 3c2:	2f 91       	pop	r18
 3c4:	1f 91       	pop	r17
 3c6:	0f 91       	pop	r16
 3c8:	ff 90       	pop	r15
 3ca:	ef 90       	pop	r14
 3cc:	df 90       	pop	r13
 3ce:	cf 90       	pop	r12
 3d0:	bf 90       	pop	r11
 3d2:	af 90       	pop	r10
 3d4:	9f 90       	pop	r9
 3d6:	8f 90       	pop	r8
 3d8:	7f 90       	pop	r7
 3da:	6f 90       	pop	r6
 3dc:	5f 90       	pop	r5
 3de:	4f 90       	pop	r4
 3e0:	3f 90       	pop	r3
 3e2:	2f 90       	pop	r2
 3e4:	1f 90       	pop	r1
 3e6:	0f 90       	pop	r0
 3e8:	0f be       	out	0x3f, r0	; 63
 3ea:	0f 90       	pop	r0
	//Set clocktimer
	//TCNT1  = 0;
	//Reset interruptbit
	//TIFR1 = 1 << 1;
	//Enable interrupts
	sei();
 3ec:	78 94       	sei
	//Return to task
	reti();
 3ee:	18 95       	reti

000003f0 <_Z9init_taski>:
	//End of task, jump to ISR
	asm("ijmp" :: "z" (TIMER1_COMPA_vect));
}

void init_task(int taskAddress)
{
 3f0:	ef 92       	push	r14
 3f2:	ff 92       	push	r15
 3f4:	0f 93       	push	r16
 3f6:	1f 93       	push	r17
 3f8:	cf 93       	push	r28
 3fa:	df 93       	push	r29
 3fc:	8c 01       	movw	r16, r24
	//Only use the root for the first task
	if(taskCount == 0){
 3fe:	80 91 26 01 	lds	r24, 0x0126
 402:	90 91 27 01 	lds	r25, 0x0127
 406:	89 2b       	or	r24, r25
 408:	09 f4       	brne	.+2      	; 0x40c <_Z9init_taski+0x1c>
 40a:	6c c0       	rjmp	.+216    	; 0x4e4 <_Z9init_taski+0xf4>
		temp = current_node_ready;
		current_node_ready->task = (task_table_t *)malloc(sizeof(task_table_t));
		current_node_ready->next = current_node_ready;
		current_node_ready->previous =  current_node_ready;
	} else {
		current_node_ready->next = (struct node *)malloc(sizeof(task_table_t));
 40c:	e0 90 22 01 	lds	r14, 0x0122
 410:	f0 90 23 01 	lds	r15, 0x0123
 414:	88 e1       	ldi	r24, 0x18	; 24
 416:	90 e0       	ldi	r25, 0x00	; 0
 418:	0e 94 38 03 	call	0x670	; 0x670 <malloc>
 41c:	ec 01       	movw	r28, r24
 41e:	f7 01       	movw	r30, r14
 420:	93 83       	std	Z+3, r25	; 0x03
 422:	82 83       	std	Z+2, r24	; 0x02
		current_node_ready->next->previous = current_node_ready;
 424:	fd 82       	std	Y+5, r15	; 0x05
 426:	ec 82       	std	Y+4, r14	; 0x04
		current_node_ready = current_node_ready->next;
 428:	90 93 23 01 	sts	0x0123, r25
 42c:	80 93 22 01 	sts	0x0122, r24
		current_node_ready->task = (task_table_t * )malloc(sizeof(task_table_t));
 430:	88 e1       	ldi	r24, 0x18	; 24
 432:	90 e0       	ldi	r25, 0x00	; 0
 434:	0e 94 38 03 	call	0x670	; 0x670 <malloc>
 438:	88 83       	st	Y, r24
 43a:	99 83       	std	Y+1, r25	; 0x01
		current_node_ready->next = 0;
 43c:	1b 82       	std	Y+3, r1	; 0x03
 43e:	1a 82       	std	Y+2, r1	; 0x02
 440:	fc 01       	movw	r30, r24
	}
	
	//Set ID of task
	current_node_ready->task->id = taskCount;
 442:	80 91 26 01 	lds	r24, 0x0126
 446:	90 91 27 01 	lds	r25, 0x0127
 44a:	91 83       	std	Z+1, r25	; 0x01
 44c:	80 83       	st	Z, r24
	//Start address of the task
	current_node_ready->task->address = taskAddress;
 44e:	15 87       	std	Z+13, r17	; 0x0d
 450:	04 87       	std	Z+12, r16	; 0x0c
	//Addres of the task wrapper
	current_node_ready->task->wrapper = (int)task_wrapper;
 452:	81 e7       	ldi	r24, 0x71	; 113
 454:	90 e0       	ldi	r25, 0x00	; 0
 456:	97 87       	std	Z+15, r25	; 0x0f
 458:	86 87       	std	Z+14, r24	; 0x0e
	//Split into 2 bytes
	current_node_ready->task->pcl = (current_node_ready->task->wrapper & 0x00FF);
 45a:	9c 01       	movw	r18, r24
 45c:	33 27       	eor	r19, r19
 45e:	31 87       	std	Z+9, r19	; 0x09
 460:	20 87       	std	Z+8, r18	; 0x08
	current_node_ready->task->pch = (current_node_ready->task->wrapper & 0xFF00) >> 8;
 462:	92 87       	std	Z+10, r25	; 0x0a
 464:	13 86       	std	Z+11, r1	; 0x0b
	//Set task pointer
	current_node_ready->task->spl = (0x7D0 - (taskCount * 0x64)) & 0x00FF;
 466:	40 91 26 01 	lds	r20, 0x0126
 46a:	50 91 27 01 	lds	r21, 0x0127
 46e:	2c e9       	ldi	r18, 0x9C	; 156
 470:	24 03       	mulsu	r18, r20
 472:	c0 01       	movw	r24, r0
 474:	25 9f       	mul	r18, r21
 476:	90 0d       	add	r25, r0
 478:	11 24       	eor	r1, r1
 47a:	80 53       	subi	r24, 0x30	; 48
 47c:	98 4f       	sbci	r25, 0xF8	; 248
 47e:	99 27       	eor	r25, r25
 480:	95 83       	std	Z+5, r25	; 0x05
 482:	84 83       	std	Z+4, r24	; 0x04
	current_node_ready->task->sph = ((0x7D0 - (taskCount * 0x64)) & 0xFF00) >> 8;
 484:	40 91 26 01 	lds	r20, 0x0126
 488:	50 91 27 01 	lds	r21, 0x0127
 48c:	24 03       	mulsu	r18, r20
 48e:	c0 01       	movw	r24, r0
 490:	25 9f       	mul	r18, r21
 492:	90 0d       	add	r25, r0
 494:	11 24       	eor	r1, r1
 496:	80 53       	subi	r24, 0x30	; 48
 498:	98 4f       	sbci	r25, 0xF8	; 248
 49a:	92 83       	std	Z+2, r25	; 0x02
 49c:	13 82       	std	Z+3, r1	; 0x03
	//Always first time
	current_node_ready->task->firsttime = 1;
 49e:	81 e0       	ldi	r24, 0x01	; 1
 4a0:	90 e0       	ldi	r25, 0x00	; 0
 4a2:	91 8b       	std	Z+17, r25	; 0x11
 4a4:	80 8b       	std	Z+16, r24	; 0x10
	//Not suitable for removal
	current_node_ready->task->markedforremoval = 0;
 4a6:	13 8a       	std	Z+19, r1	; 0x13
 4a8:	12 8a       	std	Z+18, r1	; 0x12
	//Set sleep counter 0
	current_node_ready->task->sleepCounter = 0;
 4aa:	14 8a       	std	Z+20, r1	; 0x14
 4ac:	15 8a       	std	Z+21, r1	; 0x15
 4ae:	16 8a       	std	Z+22, r1	; 0x16
 4b0:	17 8a       	std	Z+23, r1	; 0x17
	//Amount of overall tasks
	taskCount++;
 4b2:	80 91 26 01 	lds	r24, 0x0126
 4b6:	90 91 27 01 	lds	r25, 0x0127
 4ba:	01 96       	adiw	r24, 0x01	; 1
 4bc:	90 93 27 01 	sts	0x0127, r25
 4c0:	80 93 26 01 	sts	0x0126, r24
	//Amount of tasks in the ready queue
	amountReadyTasks++;
 4c4:	80 91 2a 01 	lds	r24, 0x012A
 4c8:	90 91 2b 01 	lds	r25, 0x012B
 4cc:	01 96       	adiw	r24, 0x01	; 1
 4ce:	90 93 2b 01 	sts	0x012B, r25
 4d2:	80 93 2a 01 	sts	0x012A, r24
}
 4d6:	df 91       	pop	r29
 4d8:	cf 91       	pop	r28
 4da:	1f 91       	pop	r17
 4dc:	0f 91       	pop	r16
 4de:	ff 90       	pop	r15
 4e0:	ef 90       	pop	r14
 4e2:	08 95       	ret
void init_task(int taskAddress)
{
	//Only use the root for the first task
	if(taskCount == 0){
		//Create a root TCB
		current_node_ready = (struct node * )malloc(sizeof(struct node));
 4e4:	86 e0       	ldi	r24, 0x06	; 6
 4e6:	90 e0       	ldi	r25, 0x00	; 0
 4e8:	0e 94 38 03 	call	0x670	; 0x670 <malloc>
 4ec:	ec 01       	movw	r28, r24
 4ee:	90 93 23 01 	sts	0x0123, r25
 4f2:	80 93 22 01 	sts	0x0122, r24
		root  = current_node_ready;
 4f6:	90 93 25 01 	sts	0x0125, r25
 4fa:	80 93 24 01 	sts	0x0124, r24
		temp = current_node_ready;
 4fe:	90 93 21 01 	sts	0x0121, r25
 502:	80 93 20 01 	sts	0x0120, r24
		current_node_ready->task = (task_table_t *)malloc(sizeof(task_table_t));
 506:	88 e1       	ldi	r24, 0x18	; 24
 508:	90 e0       	ldi	r25, 0x00	; 0
 50a:	0e 94 38 03 	call	0x670	; 0x670 <malloc>
 50e:	88 83       	st	Y, r24
 510:	99 83       	std	Y+1, r25	; 0x01
		current_node_ready->next = current_node_ready;
 512:	db 83       	std	Y+3, r29	; 0x03
 514:	ca 83       	std	Y+2, r28	; 0x02
		current_node_ready->previous =  current_node_ready;
 516:	dd 83       	std	Y+5, r29	; 0x05
 518:	cc 83       	std	Y+4, r28	; 0x04
 51a:	fc 01       	movw	r30, r24
 51c:	92 cf       	rjmp	.-220    	; 0x442 <_Z9init_taski+0x52>

0000051e <_Z5startv>:
}

int start(void)
{
	//stop interrupts
	cli();
 51e:	f8 94       	cli
	//All pins in PORTD are outputs
	DDRB = 0b11111111;    
 520:	8f ef       	ldi	r24, 0xFF	; 255
 522:	84 b9       	out	0x04, r24	; 4
	//Set the tick count for the ISR
	kernel_settings.isrTicks = 8000;
 524:	80 e4       	ldi	r24, 0x40	; 64
 526:	9f e1       	ldi	r25, 0x1F	; 31
 528:	90 93 0b 01 	sts	0x010B, r25
 52c:	80 93 0a 01 	sts	0x010A, r24

	// set entire TCCR1A register to 0
	TCCR1A = 0;
 530:	10 92 80 00 	sts	0x0080, r1
	// same for TCCR1B
	TCCR1B = 0;
 534:	10 92 81 00 	sts	0x0081, r1
	//initialize counter value to 0
	TCNT1  = 0;
 538:	10 92 85 00 	sts	0x0085, r1
 53c:	10 92 84 00 	sts	0x0084, r1
	//Count to
	OCR1A = kernel_settings.isrTicks;
 540:	80 91 0a 01 	lds	r24, 0x010A
 544:	90 91 0b 01 	lds	r25, 0x010B
 548:	90 93 89 00 	sts	0x0089, r25
 54c:	80 93 88 00 	sts	0x0088, r24
	// turn on CTC mode
	TCCR1B |= (1 << WGM12);
 550:	80 91 81 00 	lds	r24, 0x0081
 554:	88 60       	ori	r24, 0x08	; 8
 556:	80 93 81 00 	sts	0x0081, r24
	// Set bit for prescaler
	TCCR1B |= (1 << CS10);
 55a:	80 91 81 00 	lds	r24, 0x0081
 55e:	81 60       	ori	r24, 0x01	; 1
 560:	80 93 81 00 	sts	0x0081, r24
	// enable timer compare interrupt
	TIMSK1 |= (1 << OCIE1A);
 564:	80 91 6f 00 	lds	r24, 0x006F
 568:	82 60       	ori	r24, 0x02	; 2
 56a:	80 93 6f 00 	sts	0x006F, r24
	
	current_node_ready->next = root;
 56e:	a0 91 22 01 	lds	r26, 0x0122
 572:	b0 91 23 01 	lds	r27, 0x0123
 576:	e0 91 24 01 	lds	r30, 0x0124
 57a:	f0 91 25 01 	lds	r31, 0x0125
 57e:	13 96       	adiw	r26, 0x03	; 3
 580:	fc 93       	st	X, r31
 582:	ee 93       	st	-X, r30
 584:	12 97       	sbiw	r26, 0x02	; 2
	root->previous = current_node_ready;
 586:	b5 83       	std	Z+5, r27	; 0x05
 588:	a4 83       	std	Z+4, r26	; 0x04
	current_node_ready  = root;
 58a:	f0 93 23 01 	sts	0x0123, r31
 58e:	e0 93 22 01 	sts	0x0122, r30

	//allow interrupts
	sei();
 592:	78 94       	sei
	
	while (1)
	{
		// we have a working Timer
		counter++;
 594:	80 91 2e 01 	lds	r24, 0x012E
 598:	90 91 2f 01 	lds	r25, 0x012F
 59c:	01 96       	adiw	r24, 0x01	; 1
 59e:	90 93 2f 01 	sts	0x012F, r25
 5a2:	80 93 2e 01 	sts	0x012E, r24
	taskCount++;
	//Amount of tasks in the ready queue
	amountReadyTasks++;
}

int start(void)
 5a6:	f6 cf       	rjmp	.-20     	; 0x594 <_Z5startv+0x76>

000005a8 <_Z5sleepl>:
	
}


void * sleep(long time)
{
 5a8:	9b 01       	movw	r18, r22
 5aa:	ac 01       	movw	r20, r24
	//Disable interrupts
	cli();
 5ac:	f8 94       	cli
	//Set the sleep time in the TCB
	current_node_ready->task->sleepCounter = (time * kernel_settings.isrTicks) * 2;
 5ae:	c0 91 22 01 	lds	r28, 0x0122
 5b2:	d0 91 23 01 	lds	r29, 0x0123
 5b6:	e8 81       	ld	r30, Y
 5b8:	f9 81       	ldd	r31, Y+1	; 0x01
 5ba:	a0 91 0a 01 	lds	r26, 0x010A
 5be:	b0 91 0b 01 	lds	r27, 0x010B
 5c2:	0e 94 16 03 	call	0x62c	; 0x62c <__mulshisi3>
 5c6:	dc 01       	movw	r26, r24
 5c8:	cb 01       	movw	r24, r22
 5ca:	88 0f       	add	r24, r24
 5cc:	99 1f       	adc	r25, r25
 5ce:	aa 1f       	adc	r26, r26
 5d0:	bb 1f       	adc	r27, r27
 5d2:	84 8b       	std	Z+20, r24	; 0x14
 5d4:	95 8b       	std	Z+21, r25	; 0x15
 5d6:	a6 8b       	std	Z+22, r26	; 0x16
 5d8:	b7 8b       	std	Z+23, r27	; 0x17
	//Remove the task from the ready list
	current_node_ready->previous->next = current_node_ready->next;
 5da:	ec 81       	ldd	r30, Y+4	; 0x04
 5dc:	fd 81       	ldd	r31, Y+5	; 0x05
 5de:	8a 81       	ldd	r24, Y+2	; 0x02
 5e0:	9b 81       	ldd	r25, Y+3	; 0x03
 5e2:	93 83       	std	Z+3, r25	; 0x03
 5e4:	82 83       	std	Z+2, r24	; 0x02
	current_node_ready->next->previous = current_node_ready->previous;
 5e6:	aa 81       	ldd	r26, Y+2	; 0x02
 5e8:	bb 81       	ldd	r27, Y+3	; 0x03
 5ea:	15 96       	adiw	r26, 0x05	; 5
 5ec:	fc 93       	st	X, r31
 5ee:	ee 93       	st	-X, r30
 5f0:	14 97       	sbiw	r26, 0x04	; 4
	//Add the task to the blocked queue
	blockedQueue[amountBlockedTasks] = current_node_ready;
 5f2:	e0 91 28 01 	lds	r30, 0x0128
 5f6:	f0 91 29 01 	lds	r31, 0x0129
 5fa:	ee 0f       	add	r30, r30
 5fc:	ff 1f       	adc	r31, r31
 5fe:	e4 5f       	subi	r30, 0xF4	; 244
 600:	fe 4f       	sbci	r31, 0xFE	; 254
 602:	d1 83       	std	Z+1, r29	; 0x01
 604:	c0 83       	st	Z, r28
	amountBlockedTasks++;
 606:	80 91 28 01 	lds	r24, 0x0128
 60a:	90 91 29 01 	lds	r25, 0x0129
 60e:	01 96       	adiw	r24, 0x01	; 1
 610:	90 93 29 01 	sts	0x0129, r25
 614:	80 93 28 01 	sts	0x0128, r24
	//Tell the ISR we are comming back early because a task is blocked
	returnFromBlocked = 1;
 618:	81 e0       	ldi	r24, 0x01	; 1
 61a:	90 e0       	ldi	r25, 0x00	; 0
 61c:	90 93 2d 01 	sts	0x012D, r25
 620:	80 93 2c 01 	sts	0x012C, r24
	//Enable interrupts
	sei();
 624:	78 94       	sei
	//Jump to the ISR
	asm("ijmp" :: "z" (TIMER1_COMPA_vect));
 626:	ec e8       	ldi	r30, 0x8C	; 140
 628:	f0 e0       	ldi	r31, 0x00	; 0
 62a:	09 94       	ijmp

0000062c <__mulshisi3>:
 62c:	b7 ff       	sbrs	r27, 7
 62e:	0c 94 1e 03 	jmp	0x63c	; 0x63c <__muluhisi3>

00000632 <__mulohisi3>:
 632:	0e 94 1e 03 	call	0x63c	; 0x63c <__muluhisi3>
 636:	82 1b       	sub	r24, r18
 638:	93 0b       	sbc	r25, r19
 63a:	08 95       	ret

0000063c <__muluhisi3>:
 63c:	0e 94 29 03 	call	0x652	; 0x652 <__umulhisi3>
 640:	a5 9f       	mul	r26, r21
 642:	90 0d       	add	r25, r0
 644:	b4 9f       	mul	r27, r20
 646:	90 0d       	add	r25, r0
 648:	a4 9f       	mul	r26, r20
 64a:	80 0d       	add	r24, r0
 64c:	91 1d       	adc	r25, r1
 64e:	11 24       	eor	r1, r1
 650:	08 95       	ret

00000652 <__umulhisi3>:
 652:	a2 9f       	mul	r26, r18
 654:	b0 01       	movw	r22, r0
 656:	b3 9f       	mul	r27, r19
 658:	c0 01       	movw	r24, r0
 65a:	a3 9f       	mul	r26, r19
 65c:	70 0d       	add	r23, r0
 65e:	81 1d       	adc	r24, r1
 660:	11 24       	eor	r1, r1
 662:	91 1d       	adc	r25, r1
 664:	b2 9f       	mul	r27, r18
 666:	70 0d       	add	r23, r0
 668:	81 1d       	adc	r24, r1
 66a:	11 24       	eor	r1, r1
 66c:	91 1d       	adc	r25, r1
 66e:	08 95       	ret

00000670 <malloc>:
 670:	cf 93       	push	r28
 672:	df 93       	push	r29
 674:	82 30       	cpi	r24, 0x02	; 2
 676:	91 05       	cpc	r25, r1
 678:	10 f4       	brcc	.+4      	; 0x67e <malloc+0xe>
 67a:	82 e0       	ldi	r24, 0x02	; 2
 67c:	90 e0       	ldi	r25, 0x00	; 0
 67e:	e0 91 32 01 	lds	r30, 0x0132
 682:	f0 91 33 01 	lds	r31, 0x0133
 686:	20 e0       	ldi	r18, 0x00	; 0
 688:	30 e0       	ldi	r19, 0x00	; 0
 68a:	c0 e0       	ldi	r28, 0x00	; 0
 68c:	d0 e0       	ldi	r29, 0x00	; 0
 68e:	30 97       	sbiw	r30, 0x00	; 0
 690:	11 f1       	breq	.+68     	; 0x6d6 <malloc+0x66>
 692:	40 81       	ld	r20, Z
 694:	51 81       	ldd	r21, Z+1	; 0x01
 696:	48 17       	cp	r20, r24
 698:	59 07       	cpc	r21, r25
 69a:	c0 f0       	brcs	.+48     	; 0x6cc <malloc+0x5c>
 69c:	48 17       	cp	r20, r24
 69e:	59 07       	cpc	r21, r25
 6a0:	61 f4       	brne	.+24     	; 0x6ba <malloc+0x4a>
 6a2:	82 81       	ldd	r24, Z+2	; 0x02
 6a4:	93 81       	ldd	r25, Z+3	; 0x03
 6a6:	20 97       	sbiw	r28, 0x00	; 0
 6a8:	19 f0       	breq	.+6      	; 0x6b0 <malloc+0x40>
 6aa:	9b 83       	std	Y+3, r25	; 0x03
 6ac:	8a 83       	std	Y+2, r24	; 0x02
 6ae:	2b c0       	rjmp	.+86     	; 0x706 <malloc+0x96>
 6b0:	90 93 33 01 	sts	0x0133, r25
 6b4:	80 93 32 01 	sts	0x0132, r24
 6b8:	26 c0       	rjmp	.+76     	; 0x706 <malloc+0x96>
 6ba:	21 15       	cp	r18, r1
 6bc:	31 05       	cpc	r19, r1
 6be:	19 f0       	breq	.+6      	; 0x6c6 <malloc+0x56>
 6c0:	42 17       	cp	r20, r18
 6c2:	53 07       	cpc	r21, r19
 6c4:	18 f4       	brcc	.+6      	; 0x6cc <malloc+0x5c>
 6c6:	9a 01       	movw	r18, r20
 6c8:	be 01       	movw	r22, r28
 6ca:	df 01       	movw	r26, r30
 6cc:	ef 01       	movw	r28, r30
 6ce:	02 80       	ldd	r0, Z+2	; 0x02
 6d0:	f3 81       	ldd	r31, Z+3	; 0x03
 6d2:	e0 2d       	mov	r30, r0
 6d4:	dc cf       	rjmp	.-72     	; 0x68e <malloc+0x1e>
 6d6:	21 15       	cp	r18, r1
 6d8:	31 05       	cpc	r19, r1
 6da:	09 f1       	breq	.+66     	; 0x71e <malloc+0xae>
 6dc:	28 1b       	sub	r18, r24
 6de:	39 0b       	sbc	r19, r25
 6e0:	24 30       	cpi	r18, 0x04	; 4
 6e2:	31 05       	cpc	r19, r1
 6e4:	90 f4       	brcc	.+36     	; 0x70a <malloc+0x9a>
 6e6:	12 96       	adiw	r26, 0x02	; 2
 6e8:	8d 91       	ld	r24, X+
 6ea:	9c 91       	ld	r25, X
 6ec:	13 97       	sbiw	r26, 0x03	; 3
 6ee:	61 15       	cp	r22, r1
 6f0:	71 05       	cpc	r23, r1
 6f2:	21 f0       	breq	.+8      	; 0x6fc <malloc+0x8c>
 6f4:	fb 01       	movw	r30, r22
 6f6:	93 83       	std	Z+3, r25	; 0x03
 6f8:	82 83       	std	Z+2, r24	; 0x02
 6fa:	04 c0       	rjmp	.+8      	; 0x704 <malloc+0x94>
 6fc:	90 93 33 01 	sts	0x0133, r25
 700:	80 93 32 01 	sts	0x0132, r24
 704:	fd 01       	movw	r30, r26
 706:	32 96       	adiw	r30, 0x02	; 2
 708:	44 c0       	rjmp	.+136    	; 0x792 <malloc+0x122>
 70a:	fd 01       	movw	r30, r26
 70c:	e2 0f       	add	r30, r18
 70e:	f3 1f       	adc	r31, r19
 710:	81 93       	st	Z+, r24
 712:	91 93       	st	Z+, r25
 714:	22 50       	subi	r18, 0x02	; 2
 716:	31 09       	sbc	r19, r1
 718:	2d 93       	st	X+, r18
 71a:	3c 93       	st	X, r19
 71c:	3a c0       	rjmp	.+116    	; 0x792 <malloc+0x122>
 71e:	20 91 30 01 	lds	r18, 0x0130
 722:	30 91 31 01 	lds	r19, 0x0131
 726:	23 2b       	or	r18, r19
 728:	41 f4       	brne	.+16     	; 0x73a <malloc+0xca>
 72a:	20 91 02 01 	lds	r18, 0x0102
 72e:	30 91 03 01 	lds	r19, 0x0103
 732:	30 93 31 01 	sts	0x0131, r19
 736:	20 93 30 01 	sts	0x0130, r18
 73a:	20 91 00 01 	lds	r18, 0x0100
 73e:	30 91 01 01 	lds	r19, 0x0101
 742:	21 15       	cp	r18, r1
 744:	31 05       	cpc	r19, r1
 746:	41 f4       	brne	.+16     	; 0x758 <malloc+0xe8>
 748:	2d b7       	in	r18, 0x3d	; 61
 74a:	3e b7       	in	r19, 0x3e	; 62
 74c:	40 91 04 01 	lds	r20, 0x0104
 750:	50 91 05 01 	lds	r21, 0x0105
 754:	24 1b       	sub	r18, r20
 756:	35 0b       	sbc	r19, r21
 758:	e0 91 30 01 	lds	r30, 0x0130
 75c:	f0 91 31 01 	lds	r31, 0x0131
 760:	e2 17       	cp	r30, r18
 762:	f3 07       	cpc	r31, r19
 764:	a0 f4       	brcc	.+40     	; 0x78e <malloc+0x11e>
 766:	2e 1b       	sub	r18, r30
 768:	3f 0b       	sbc	r19, r31
 76a:	28 17       	cp	r18, r24
 76c:	39 07       	cpc	r19, r25
 76e:	78 f0       	brcs	.+30     	; 0x78e <malloc+0x11e>
 770:	ac 01       	movw	r20, r24
 772:	4e 5f       	subi	r20, 0xFE	; 254
 774:	5f 4f       	sbci	r21, 0xFF	; 255
 776:	24 17       	cp	r18, r20
 778:	35 07       	cpc	r19, r21
 77a:	48 f0       	brcs	.+18     	; 0x78e <malloc+0x11e>
 77c:	4e 0f       	add	r20, r30
 77e:	5f 1f       	adc	r21, r31
 780:	50 93 31 01 	sts	0x0131, r21
 784:	40 93 30 01 	sts	0x0130, r20
 788:	81 93       	st	Z+, r24
 78a:	91 93       	st	Z+, r25
 78c:	02 c0       	rjmp	.+4      	; 0x792 <malloc+0x122>
 78e:	e0 e0       	ldi	r30, 0x00	; 0
 790:	f0 e0       	ldi	r31, 0x00	; 0
 792:	cf 01       	movw	r24, r30
 794:	df 91       	pop	r29
 796:	cf 91       	pop	r28
 798:	08 95       	ret

0000079a <free>:
 79a:	0f 93       	push	r16
 79c:	1f 93       	push	r17
 79e:	cf 93       	push	r28
 7a0:	df 93       	push	r29
 7a2:	00 97       	sbiw	r24, 0x00	; 0
 7a4:	09 f4       	brne	.+2      	; 0x7a8 <free+0xe>
 7a6:	8c c0       	rjmp	.+280    	; 0x8c0 <free+0x126>
 7a8:	fc 01       	movw	r30, r24
 7aa:	32 97       	sbiw	r30, 0x02	; 2
 7ac:	13 82       	std	Z+3, r1	; 0x03
 7ae:	12 82       	std	Z+2, r1	; 0x02
 7b0:	00 91 32 01 	lds	r16, 0x0132
 7b4:	10 91 33 01 	lds	r17, 0x0133
 7b8:	01 15       	cp	r16, r1
 7ba:	11 05       	cpc	r17, r1
 7bc:	81 f4       	brne	.+32     	; 0x7de <free+0x44>
 7be:	20 81       	ld	r18, Z
 7c0:	31 81       	ldd	r19, Z+1	; 0x01
 7c2:	82 0f       	add	r24, r18
 7c4:	93 1f       	adc	r25, r19
 7c6:	20 91 30 01 	lds	r18, 0x0130
 7ca:	30 91 31 01 	lds	r19, 0x0131
 7ce:	28 17       	cp	r18, r24
 7d0:	39 07       	cpc	r19, r25
 7d2:	79 f5       	brne	.+94     	; 0x832 <free+0x98>
 7d4:	f0 93 31 01 	sts	0x0131, r31
 7d8:	e0 93 30 01 	sts	0x0130, r30
 7dc:	71 c0       	rjmp	.+226    	; 0x8c0 <free+0x126>
 7de:	d8 01       	movw	r26, r16
 7e0:	40 e0       	ldi	r20, 0x00	; 0
 7e2:	50 e0       	ldi	r21, 0x00	; 0
 7e4:	ae 17       	cp	r26, r30
 7e6:	bf 07       	cpc	r27, r31
 7e8:	50 f4       	brcc	.+20     	; 0x7fe <free+0x64>
 7ea:	12 96       	adiw	r26, 0x02	; 2
 7ec:	2d 91       	ld	r18, X+
 7ee:	3c 91       	ld	r19, X
 7f0:	13 97       	sbiw	r26, 0x03	; 3
 7f2:	ad 01       	movw	r20, r26
 7f4:	21 15       	cp	r18, r1
 7f6:	31 05       	cpc	r19, r1
 7f8:	09 f1       	breq	.+66     	; 0x83c <free+0xa2>
 7fa:	d9 01       	movw	r26, r18
 7fc:	f3 cf       	rjmp	.-26     	; 0x7e4 <free+0x4a>
 7fe:	9d 01       	movw	r18, r26
 800:	da 01       	movw	r26, r20
 802:	33 83       	std	Z+3, r19	; 0x03
 804:	22 83       	std	Z+2, r18	; 0x02
 806:	60 81       	ld	r22, Z
 808:	71 81       	ldd	r23, Z+1	; 0x01
 80a:	86 0f       	add	r24, r22
 80c:	97 1f       	adc	r25, r23
 80e:	82 17       	cp	r24, r18
 810:	93 07       	cpc	r25, r19
 812:	69 f4       	brne	.+26     	; 0x82e <free+0x94>
 814:	ec 01       	movw	r28, r24
 816:	28 81       	ld	r18, Y
 818:	39 81       	ldd	r19, Y+1	; 0x01
 81a:	26 0f       	add	r18, r22
 81c:	37 1f       	adc	r19, r23
 81e:	2e 5f       	subi	r18, 0xFE	; 254
 820:	3f 4f       	sbci	r19, 0xFF	; 255
 822:	31 83       	std	Z+1, r19	; 0x01
 824:	20 83       	st	Z, r18
 826:	8a 81       	ldd	r24, Y+2	; 0x02
 828:	9b 81       	ldd	r25, Y+3	; 0x03
 82a:	93 83       	std	Z+3, r25	; 0x03
 82c:	82 83       	std	Z+2, r24	; 0x02
 82e:	45 2b       	or	r20, r21
 830:	29 f4       	brne	.+10     	; 0x83c <free+0xa2>
 832:	f0 93 33 01 	sts	0x0133, r31
 836:	e0 93 32 01 	sts	0x0132, r30
 83a:	42 c0       	rjmp	.+132    	; 0x8c0 <free+0x126>
 83c:	13 96       	adiw	r26, 0x03	; 3
 83e:	fc 93       	st	X, r31
 840:	ee 93       	st	-X, r30
 842:	12 97       	sbiw	r26, 0x02	; 2
 844:	ed 01       	movw	r28, r26
 846:	49 91       	ld	r20, Y+
 848:	59 91       	ld	r21, Y+
 84a:	9e 01       	movw	r18, r28
 84c:	24 0f       	add	r18, r20
 84e:	35 1f       	adc	r19, r21
 850:	e2 17       	cp	r30, r18
 852:	f3 07       	cpc	r31, r19
 854:	71 f4       	brne	.+28     	; 0x872 <free+0xd8>
 856:	80 81       	ld	r24, Z
 858:	91 81       	ldd	r25, Z+1	; 0x01
 85a:	84 0f       	add	r24, r20
 85c:	95 1f       	adc	r25, r21
 85e:	02 96       	adiw	r24, 0x02	; 2
 860:	11 96       	adiw	r26, 0x01	; 1
 862:	9c 93       	st	X, r25
 864:	8e 93       	st	-X, r24
 866:	82 81       	ldd	r24, Z+2	; 0x02
 868:	93 81       	ldd	r25, Z+3	; 0x03
 86a:	13 96       	adiw	r26, 0x03	; 3
 86c:	9c 93       	st	X, r25
 86e:	8e 93       	st	-X, r24
 870:	12 97       	sbiw	r26, 0x02	; 2
 872:	e0 e0       	ldi	r30, 0x00	; 0
 874:	f0 e0       	ldi	r31, 0x00	; 0
 876:	d8 01       	movw	r26, r16
 878:	12 96       	adiw	r26, 0x02	; 2
 87a:	8d 91       	ld	r24, X+
 87c:	9c 91       	ld	r25, X
 87e:	13 97       	sbiw	r26, 0x03	; 3
 880:	00 97       	sbiw	r24, 0x00	; 0
 882:	19 f0       	breq	.+6      	; 0x88a <free+0xf0>
 884:	f8 01       	movw	r30, r16
 886:	8c 01       	movw	r16, r24
 888:	f6 cf       	rjmp	.-20     	; 0x876 <free+0xdc>
 88a:	8d 91       	ld	r24, X+
 88c:	9c 91       	ld	r25, X
 88e:	98 01       	movw	r18, r16
 890:	2e 5f       	subi	r18, 0xFE	; 254
 892:	3f 4f       	sbci	r19, 0xFF	; 255
 894:	82 0f       	add	r24, r18
 896:	93 1f       	adc	r25, r19
 898:	20 91 30 01 	lds	r18, 0x0130
 89c:	30 91 31 01 	lds	r19, 0x0131
 8a0:	28 17       	cp	r18, r24
 8a2:	39 07       	cpc	r19, r25
 8a4:	69 f4       	brne	.+26     	; 0x8c0 <free+0x126>
 8a6:	30 97       	sbiw	r30, 0x00	; 0
 8a8:	29 f4       	brne	.+10     	; 0x8b4 <free+0x11a>
 8aa:	10 92 33 01 	sts	0x0133, r1
 8ae:	10 92 32 01 	sts	0x0132, r1
 8b2:	02 c0       	rjmp	.+4      	; 0x8b8 <free+0x11e>
 8b4:	13 82       	std	Z+3, r1	; 0x03
 8b6:	12 82       	std	Z+2, r1	; 0x02
 8b8:	10 93 31 01 	sts	0x0131, r17
 8bc:	00 93 30 01 	sts	0x0130, r16
 8c0:	df 91       	pop	r29
 8c2:	cf 91       	pop	r28
 8c4:	1f 91       	pop	r17
 8c6:	0f 91       	pop	r16
 8c8:	08 95       	ret

000008ca <_exit>:
 8ca:	f8 94       	cli

000008cc <__stop_program>:
 8cc:	ff cf       	rjmp	.-2      	; 0x8cc <__stop_program>
